"""
tidal equations: eh0', ek', debph'' 
"""

import numpy as np
from numpy import exp

ka = 8.0 * np.pi
c = 29979245800.0  # cm/s
G = 6.67408e-8  # cm^3/g/s^2

runit = 1.e6 # cm
mB = 1.660538921e-24 # g 
dimlmB = G*mB/c**2/runit



class STGB_eqs(object):
    """ spherical equations in scalar-tensor with Gauss-Bonnet term;
        a length unit is employed so that all quantities are dimensionless
    """

    def __init__(self, xi=-4.4, msq = 1.):
        """ Theoretical parameters """
        self.xi = xi
        self.msq = msq
    
    def Umf(self, bph):
        return self.msq*bph**2

    def dUmf(self, bph):
        return 2.0*self.msq*bph

    def ddUmf(self, bph):
        return 2.0*self.msq        
        
    def dfxif(self, bph):
        return 2.0*self.xi*bph
        
    def ddfxif(self, bph):
        return 2.*self.xi               


    # 0th-order equations             
    def dnudr(self, r, nu, mu1, bph, psi, p, e):
        Um = self.Umf(bph)
        dUm = self.dUmf(bph)
        dfxi = self.dfxif(bph)
        ddfxi = self.ddfxif(bph)
        return -(exp(2*mu1)*(2 - psi**2*r**2 - 2*exp(2*mu1) - 2*ka*p*r**2*exp(2*mu1) + r**2*exp(2*mu1)*Um))/(4.*(r*exp(2*mu1) - 6*psi*dfxi + 2*psi*exp(2*mu1)*dfxi))
      
    def dmu1dr(self, r, nu, mu1, bph, psi, p, e):
        Um = self.Umf(bph)
        dUm = self.dUmf(bph)
        dfxi = self.dfxif(bph)
        ddfxi = self.ddfxif(bph)
        return -(-480*dfxi**3*psi**3*r + 192*ddfxi*dfxi**2*psi**4*r**2 + 192*dfxi**3*ka*p*psi*r*exp(2*mu1) + 736*dfxi**3*psi**3*r*exp(2*mu1) + 120*dfxi**2*psi**2*r**2*exp(2*mu1) + 96*dfxi**3*dUm*psi**2*r**2*exp(2*mu1) - 256*ddfxi*dfxi**2*psi**4*r**2*exp(2*mu1) - 80*ddfxi*dfxi*psi**3*r**3*exp(2*mu1) - 20*dfxi**2*psi**4*r**4*exp(2*mu1) - 96*dfxi**3*psi*r*Um*exp(2*mu1) - 448*dfxi**3*ka*p*psi*r*exp(4*mu1) - 288*dfxi**3*psi**3*r*exp(4*mu1) + 16*dfxi**2*e*ka*r**2*exp(4*mu1) - 32*dfxi**2*ka*p*r**2*exp(4*mu1) - 144*dfxi**2*psi**2*r**2*exp(4*mu1) - 128*dfxi**3*dUm*psi**2*r**2*exp(4*mu1) + 64*ddfxi*dfxi**2*psi**4*r**2*exp(4*mu1) + 8*dfxi*psi*r**3*exp(4*mu1) - 40*dfxi**2*dUm*psi*r**3*exp(4*mu1) + 96*ddfxi*dfxi*psi**3*r**3*exp(4*mu1) + 8*ddfxi*psi**2*r**4*exp(4*mu1) - 56*dfxi**2*e*ka*psi**2*r**4*exp(4*mu1) + 8*dfxi**2*ka*p*psi**2*r**4*exp(4*mu1) + 4*dfxi**2*psi**4*r**4*exp(4*mu1) + 8*dfxi*psi**3*r**5*exp(4*mu1) + 224*dfxi**3*psi*r*Um*exp(4*mu1) + 24*dfxi**2*r**2*Um*exp(4*mu1) - 32*dfxi**2*psi**2*r**4*Um*exp(4*mu1) + 320*dfxi**3*ka*p*psi*r*exp(6*mu1) + 32*dfxi**3*psi**3*r*exp(6*mu1) - 32*dfxi**2*e*ka*r**2*exp(6*mu1) + 64*dfxi**2*ka*p*r**2*exp(6*mu1) + 24*dfxi**2*psi**2*r**2*exp(6*mu1) + 32*dfxi**3*dUm*psi**2*r**2*exp(6*mu1) - 16*dfxi*psi*r**3*exp(6*mu1) + 48*dfxi**2*dUm*psi*r**3*exp(6*mu1) - 16*ddfxi*dfxi*psi**3*r**3*exp(6*mu1) - 2*r**4*exp(6*mu1) + 4*dfxi*dUm*r**4*exp(6*mu1) - 16*dfxi**2*e*ka**2*p*r**4*exp(6*mu1) - 8*ddfxi*psi**2*r**4*exp(6*mu1) + 24*dfxi**2*e*ka*psi**2*r**4*exp(6*mu1) - 8*dfxi**2*ka*p*psi**2*r**4*exp(6*mu1) + 20*dfxi*e*ka*psi*r**5*exp(6*mu1) - 4*dfxi*ka*p*psi*r**5*exp(6*mu1) - psi**2*r**6*exp(6*mu1) - 160*dfxi**3*psi*r*Um*exp(6*mu1) - 48*dfxi**2*r**2*Um*exp(6*mu1) + 8*dfxi**2*e*ka*r**4*Um*exp(6*mu1) - 8*dfxi**2*ka*p*r**4*Um*exp(6*mu1) + 16*dfxi**2*psi**2*r**4*Um*exp(6*mu1) + 12*dfxi*psi*r**5*Um*exp(6*mu1) + 4*dfxi**2*r**4*Um**2*exp(6*mu1) - 64*dfxi**3*ka*p*psi*r*exp(8*mu1) + 16*dfxi**2*e*ka*r**2*exp(8*mu1) - 32*dfxi**2*ka*p*r**2*exp(8*mu1) + 8*dfxi*psi*r**3*exp(8*mu1) - 8*dfxi**2*dUm*psi*r**3*exp(8*mu1) + 2*r**4*exp(8*mu1) - 4*dfxi*dUm*r**4*exp(8*mu1) + 16*dfxi**2*e*ka**2*p*r**4*exp(8*mu1) - 4*dfxi*e*ka*psi*r**5*exp(8*mu1) + 4*dfxi*ka*p*psi*r**5*exp(8*mu1) - 2*e*ka*r**6*exp(8*mu1) + 32*dfxi**3*psi*r*Um*exp(8*mu1) + 24*dfxi**2*r**2*Um*exp(8*mu1) - 8*dfxi**2*e*ka*r**4*Um*exp(8*mu1) + 8*dfxi**2*ka*p*r**4*Um*exp(8*mu1) - 4*dfxi*psi*r**5*Um*exp(8*mu1) - r**6*Um*exp(8*mu1) - 4*dfxi**2*r**4*Um**2*exp(8*mu1))/(4.*(96*dfxi**3*psi - 120*dfxi**3*psi**3*r**2 - 192*dfxi**3*psi*exp(2*mu1) - 24*dfxi**2*r*exp(2*mu1) - 48*dfxi**3*ka*p*psi*r**2*exp(2*mu1) + 48*dfxi**3*psi**3*r**2*exp(2*mu1) + 72*dfxi**2*psi**2*r**3*exp(2*mu1) + 24*dfxi**3*psi*r**2*Um*exp(2*mu1) + 96*dfxi**3*psi*exp(4*mu1) + 48*dfxi**2*r*exp(4*mu1) + 32*dfxi**3*ka*p*psi*r**2*exp(4*mu1) + 8*dfxi**3*psi**3*r**2*exp(4*mu1) + 16*dfxi**2*ka*p*r**3*exp(4*mu1) - 24*dfxi**2*psi**2*r**3*exp(4*mu1) - 14*dfxi*psi*r**4*exp(4*mu1) - 16*dfxi**3*psi*r**2*Um*exp(4*mu1) - 8*dfxi**2*r**3*Um*exp(4*mu1) - 24*dfxi**2*r*exp(6*mu1) + 16*dfxi**3*ka*p*psi*r**2*exp(6*mu1) - 16*dfxi**2*ka*p*r**3*exp(6*mu1) + 2*dfxi*psi*r**4*exp(6*mu1) + r**5*exp(6*mu1) - 8*dfxi**3*psi*r**2*Um*exp(6*mu1) + 8*dfxi**2*r**3*Um*exp(6*mu1)))
        
    def dphdr(self, r, nu, mu1, bph, psi, p, e):
        return psi       
        
    def ddphdr(self, r, nu, mu1, bph, psi, p, e):
        Um = self.Umf(bph)
        dUm = self.dUmf(bph)
        dfxi = self.dfxif(bph)
        ddfxi = self.ddfxif(bph)
        return (-192*ddfxi*dfxi**2*psi**3 + 720*dfxi**3*psi**4*r - 48*ddfxi*dfxi**2*psi**5*r**2 + 48*dfxi**2*psi*exp(2*mu1) + 384*ddfxi*dfxi**2*psi**3*exp(2*mu1) + 48*ddfxi*dfxi*psi**2*r*exp(2*mu1) - 624*dfxi**3*psi**4*r*exp(2*mu1) - 336*dfxi**2*psi**3*r**2*exp(2*mu1) - 144*dfxi**3*dUm*psi**3*r**2*exp(2*mu1) + 96*ddfxi*dfxi**2*psi**5*r**2*exp(2*mu1) + 24*ddfxi*dfxi*psi**4*r**3*exp(2*mu1) + 144*dfxi**3*psi**2*r*Um*exp(2*mu1) - 48*ddfxi*dfxi**2*psi**3*r**2*Um*exp(2*mu1) - 96*dfxi**2*psi*exp(4*mu1) - 192*ddfxi*dfxi**2*psi**3*exp(4*mu1) - 12*dfxi*r*exp(4*mu1) - 96*ddfxi*dfxi*psi**2*r*exp(4*mu1) + 176*dfxi**3*psi**4*r*exp(4*mu1) + 160*dfxi**2*psi**3*r**2*exp(4*mu1) + 96*dfxi**3*dUm*psi**3*r**2*exp(4*mu1) - 48*ddfxi*dfxi**2*psi**5*r**2*exp(4*mu1) + 48*dfxi*psi**2*r**3*exp(4*mu1) + 84*dfxi**2*dUm*psi**2*r**3*exp(4*mu1) - 32*ddfxi*dfxi*psi**4*r**3*exp(4*mu1) - 4*ddfxi*psi**3*r**4*exp(4*mu1) - 4*dfxi**2*psi**5*r**4*exp(4*mu1) + dfxi*psi**4*r**5*exp(4*mu1) - 240*dfxi**3*psi**2*r*Um*exp(4*mu1) - 24*dfxi**2*psi*r**2*Um*exp(4*mu1) + 32*ddfxi*dfxi**2*psi**3*r**2*Um*exp(4*mu1) + 16*ddfxi*dfxi*psi**2*r**3*Um*exp(4*mu1) + 24*dfxi**2*psi**3*r**4*Um*exp(4*mu1) + e*ka*r**2*exp(4*mu1)*(2*dfxi*psi**2*r**3*(-4 + exp(2*mu1))*exp(2*mu1) - 8*dfxi**2*psi**3*r**2*(-3 + 2*exp(2*mu1)) - 2*dfxi*r*exp(2*mu1)*(4 + (-4 + r**2*Um)*exp(2*mu1)) - 4*dfxi*ka*p*(4*dfxi*psi - r)*r**2*exp(4*mu1) + psi*(r**4*exp(4*mu1) + 8*dfxi**2*(3 - 2*exp(2*mu1) + (-1 + r**2*Um)*exp(4*mu1)))) + 48*dfxi**2*psi*exp(6*mu1) + 24*dfxi*r*exp(6*mu1) + 48*ddfxi*dfxi*psi**2*r*exp(6*mu1) - 16*dfxi**3*psi**4*r*exp(6*mu1) - 16*dfxi**2*psi**3*r**2*exp(6*mu1) - 16*dfxi**3*dUm*psi**3*r**2*exp(6*mu1) + 4*dfxi*psi**2*r**3*exp(6*mu1) - 40*dfxi**2*dUm*psi**2*r**3*exp(6*mu1) + 8*ddfxi*dfxi*psi**4*r**3*exp(6*mu1) - 2*psi*r**4*exp(6*mu1) - 16*dfxi*dUm*psi*r**4*exp(6*mu1) + 4*ddfxi*psi**3*r**4*exp(6*mu1) + 112*dfxi**3*psi**2*r*Um*exp(6*mu1) + 48*dfxi**2*psi*r**2*Um*exp(6*mu1) + 16*ddfxi*dfxi**2*psi**3*r**2*Um*exp(6*mu1) - 4*dfxi*r**3*Um*exp(6*mu1) - 16*ddfxi*dfxi*psi**2*r**3*Um*exp(6*mu1) - 8*dfxi**2*psi**3*r**4*Um*exp(6*mu1) - 10*dfxi*psi**2*r**5*Um*exp(6*mu1) - ka*p*r*exp(2*mu1)*(-2*dfxi*psi**2*(16*dfxi**2*(-3 + exp(2*mu1))**2*(-1 + exp(2*mu1)) - r**2*exp(2*mu1)*(-16*ddfxi*(-1 + exp(2*mu1)) + r**2*(-6 + exp(2*mu1))*exp(2*mu1))) + 8*dfxi**2*psi**3*r*(3*r**2*exp(2*mu1) + 4*ddfxi*(-3 + 2*exp(2*mu1) + exp(4*mu1))) + psi*r*exp(2*mu1)*(r**4*exp(4*mu1) + 8*dfxi**2*(-9 + 14*exp(2*mu1) + (-5 + r**2*Um)*exp(4*mu1))) - 2*dfxi*r**4*Um*exp(6*mu1)) - 12*dfxi*r*exp(8*mu1) - 4*dfxi*psi**2*r**3*exp(8*mu1) + 4*dfxi**2*dUm*psi**2*r**3*exp(8*mu1) - 2*psi*r**4*exp(8*mu1) + 4*dfxi*dUm*psi*r**4*exp(8*mu1) + dUm*r**5*exp(8*mu1) - 16*dfxi**3*psi**2*r*Um*exp(8*mu1) - 24*dfxi**2*psi*r**2*Um*exp(8*mu1) + 4*dfxi*r**3*Um*exp(8*mu1) + 2*dfxi*psi**2*r**5*Um*exp(8*mu1) + psi*r**6*Um*exp(8*mu1) + 4*dfxi**2*psi*r**4*Um**2*exp(8*mu1) - dfxi*r**5*Um**2*exp(8*mu1))/(2.*(-24*dfxi**2*psi**2*r**3*(-3 + exp(2*mu1))*exp(2*mu1) + 16*dfxi**2*ka*p*r**2*(-1 + exp(2*mu1))*exp(2*mu1)*(-(r*exp(2*mu1)) + dfxi*psi*(3 + exp(2*mu1))) + 8*dfxi**3*psi**3*r**2*(-15 + 6*exp(2*mu1) + exp(4*mu1)) + r*exp(2*mu1)*(8*dfxi**2*(-1 + exp(2*mu1))*(3 + (-3 + r**2*Um)*exp(2*mu1)) + r**4*exp(4*mu1)) - 2*dfxi*psi*(-(r**4*(-7 + exp(2*mu1))*exp(4*mu1)) + 4*dfxi**2*(-1 + exp(2*mu1))*(12 + 3*(-4 + r**2*Um)*exp(2*mu1) + r**2*Um*exp(4*mu1)))))
        
    def dpdr(self, r, nu, mu1, bph, psi, p, e):
        Um = self.Umf(bph)
        dUm = self.dUmf(bph)
        dfxi = self.dfxif(bph)
        ddfxi = self.ddfxif(bph)
        return -((-e - p)*exp(2*mu1)*(2 - psi**2*r**2 - 2*exp(2*mu1) - 2*ka*p*r**2*exp(2*mu1) + r**2*exp(2*mu1)*Um))/(4.*(r*exp(2*mu1) - 6*psi*dfxi + 2*psi*exp(2*mu1)*dfxi))  

    def dMbardr(self, r, nu, mu1, bph, psi, p, e, n):

        return 0.5*ka * dimlmB * n * r**2.0 * np.exp(mu1) # unit: g/cm



 
    # 0th-order center recurrence equations
    def coef2(self, pc, ec, bphc):
        """r^2 coefficients"""
        df0 = self.dfxif(bphc)
        u0 = self.Umf(bphc)
        du0 = self.dUmf(bphc)
        a4 = 18432.*df0**3
        a3 = -768.*df0**2*(9.+2.*df0*du0)
        a2 = 288.*df0*(3.+2.*df0*du0)
        a1 = -12.*( 3. + 6.*df0*du0 + 2.*df0**2 * (2*ka*pc - u0) * (2*ka*ec + u0) )
        a0 = 3.*du0 + 2.*df0*( 2*ka*ec + u0 ) * ( ka*ec + 3.*ka*pc - u0 )
        conroots = np.roots( [a4, a3, a2, a1, a0 ] )
        bph2 = np.real(conroots[3])    # only the fourth root corresponds to spontaneous scalarization 
        check = np.imag(conroots[3])
        nu2 = (ec*ka + 3*(1 - 8*bph2*df0)*ka*pc + (-1 + 12*bph2*df0)*u0)/(12.*(1 - 8*bph2*df0)**2)
        mu12 = (2*ec*ka + u0)/(12 - 96*bph2*df0)
        p2 = -(nu2*(ec + pc))
        return [nu2, mu12, bph2, p2, check]     

    def coef4(self, pc, ec, bphc, nu2, mu12, bph2, p2, e2):       
        """r^4 coefficients"""
        ddf0 = self.ddfxif(bphc)
        df0 = self.dfxif(bphc)
        u0 = self.Umf(bphc)
        du0 = self.dUmf(bphc)  
        ddu0 = self.ddUmf(bphc)     
        nu4 = (-160.*bph2**3*(df0 + 16*ddf0*df0*nu2) - 8*bph2**2*(-3 - 5*df0*du0 - 20*ddf0*mu12 - 40*ddf0*nu2 + 16*df0**2*nu2*(ddu0 - 12*nu2 + 6*mu12*(-3 + 16*ddf0*nu2))) + ka*(2*e2*(1 + 128*df0**2*nu2**2) - 5*(-1 + 64*df0**2*mu12*nu2)*(2*p2 + 4*mu12*pc)) + 2*mu12*(-2304*df0**2*mu12**2*nu2 + 512*df0**2*nu2**3 + 2*mu12*(10 - 896*df0**2*nu2**2) + (-5 + 320*df0**2*mu12*nu2)*u0) + 4*bph2*(du0*(-1 + 8*df0**2*nu2*(10*mu12 + 4*nu2)) + df0*(ddu0*(2*mu12 + 4*nu2) - 2*(2*(8*nu2**2 + 4*mu12**2*(5 - 12*ddf0*nu2 - 960*df0**2*nu2**2) + 16*mu12*nu2*(2 - 6*ddf0*nu2 + 32*df0**2*nu2**2)) + 5*ka*(2*p2 + 4*mu12*pc) - 10*mu12*u0))))/(80.*(1 + 64*bph2**2*df0**2 - 16*df0**2*mu12*(2*mu12 + 8*nu2) + 16*bph2*df0*(-1 + 64*df0**2*mu12*nu2)))
        mu14 = (-32*bph2**3*(df0 + 40*ddf0*df0*mu12) + bph2**2*(4 - 8*df0*du0 + 160*ddf0*mu12 - 64*df0**2*mu12*(ddu0 - 4*nu2 + 6*mu12*(-5 + 16*ddf0*nu2))) + bph2*(du0*(1 - 16*df0**2*mu12*(10*mu12 + 4*nu2)) + 4*df0*(-4*e2*ka + 2*mu12*(ddu0 + 4*(-2*nu2 + 704*df0**2*mu12**2*nu2 + 2*mu12*(-5 + 12*ddf0*nu2 - 64*df0**2*nu2**2))))) + ka*(2*e2*(1 - 64*df0**2*mu12*nu2) + 160*df0**2*mu12**2*(2*p2 + 4*mu12*pc)) + 4*mu12**2*(5 - 8*df0**2*(-20*mu12**2 + 144*mu12*nu2 - 16*nu2**2 + 10*mu12*u0)))/(20.*(1 + 64*bph2**2*df0**2 - 16*df0**2*mu12*(2*mu12 + 8*nu2) + 16*bph2*df0*(-1 + 64*df0**2*mu12*nu2)))
        bph4 = (64*bph2**3*df0**2*(ddu0 - 12*nu2 + 2*mu12*(11 - 112*ddf0*nu2)) + 16*bph2**2*df0*(-ddu0 + 2*(5 - 2*df0*du0)*nu2 + 40*mu12**2*(ddf0 + 48*df0**2*nu2) + 2*mu12*(-13 + 5*df0*du0 + 32*ddf0*nu2 + 128*df0**2*nu2**2)) + bph2*(ddu0 - 4*(576*df0**2*mu12**3 + 2*(1 - df0*du0 + 16*df0**2*e2*ka)*nu2 + 4*mu12*(-2 + df0*du0 - 6*ddf0*nu2 + 2*df0**2*(32*nu2**2 + 10*ka*p2)) + 16*df0**2*mu12**2*(28*nu2 + 10*ka*pc - 5*u0))) + 2*df0*(ka*(2*e2*(2*mu12 + 4*nu2) + 10*mu12*(2*p2 + 4*mu12*pc)) + 2*mu12*(40*mu12**2 - 64*mu12*nu2 + 16*nu2**2 - 10*mu12*u0)))/(40.*(1 + 64*bph2**2*df0**2 - 16*df0**2*mu12*(2*mu12 + 8*nu2) + 16*bph2*df0*(-1 + 64*df0**2*mu12*nu2)))
        p4 = (-12*e2*nu2 - 12*nu2*p2 - 24*nu4*(ec + pc))/24.
        return [nu4, mu14, bph4, p4]
         
    # 0th-order higher derivatives
    def ddnudr(self, r, nu, mu1, bph, psi, p, e, csq):
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)       
        
        return (-32*bph*nur*psi*r*(1 + mu1r*r)*self.xi*exp(2*mu1) + r**2*exp(2*mu1)*(2*(mu1r - nur)*(1 + nur*r)*exp(2*mu1) + psi**2*(16*nur*self.xi - r*exp(2*mu1)) + 2*ka*p*r*exp(4*mu1)) + bph**2*(-128*mu1r*nur**2*self.xi**2*(-3 + exp(2*mu1)) + 128*nur**3*self.xi**2*(-1 + exp(2*mu1)) + 16*nur*r**2*self.msq*self.xi*exp(4*mu1) - r**3*self.msq*exp(6*mu1)))/(2.*(-64*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) - 8*bph*psi*r**2*self.xi*exp(2*mu1) + r**3*exp(4*mu1)))        
        
    def ddmu1dr(self, r, nu, mu1, bph, psi, p, e, csq):
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)
        pr = self.dpdr(r, nu, mu1, bph, psi ,p ,e)
        nurr = self.ddnudr( r, nu, mu1, bph, psi, p, e, csq)         
        
        return -((-64*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) - 8*bph*psi*r**2*self.xi*exp(2*mu1) + r**3*exp(4*mu1))*(-(bphrr*psi*r*(-24*self.xi + (r**2 + 24*self.xi)*exp(2*mu1))) - psi**2*(-16*self.xi*(-1 + exp(2*mu1)) + nur*r*(-16*self.xi + (r**2 + 16*self.xi)*exp(2*mu1)) - mu1r*r*(-56*self.xi + (r**2 + 24*self.xi)*exp(2*mu1))) - exp(2*mu1)*((ka*pr*r**3*exp(2*mu1))/csq + 2*(-1 + 2*mu1r**2*r**2 - 2*mu1r*nur*r**2 + exp(2*mu1) + nur*r*(1 - exp(2*mu1) + e*ka*r**2*exp(2*mu1)))) - bph**2*nur*r**3*self.msq*exp(4*mu1) - bph*(-8*bphrr*self.xi*(-2*(-1 + nur*r)*(-1 + exp(2*mu1)) + mu1r*r*(-7 + 3*exp(2*mu1))) + psi*(16*mu1r**2*r*self.xi*(-6 + exp(2*mu1)) - 16*mu1r*(-1 + nur*r)*self.xi*(-3 + exp(2*mu1)) + r**3*self.msq*exp(4*mu1))) - (8*bph*r*self.xi*(-1 + exp(2*mu1))*(256*bph**5*(-(nurr*r) + nur*(1 + 2*mu1r*r))*self.msq*self.xi**3*(-1 + exp(2*mu1))**2*exp(4*mu1) + r**3*exp(4*mu1)*(-4*psi**3*self.xi*(-1 + exp(2*mu1))*(-16*nur*self.xi + r*exp(2*mu1)) + bphrr*r**2*(-2 + 3*mu1r*r - nur*r)*exp(4*mu1) + psi*exp(2*mu1)*(8*nur*self.xi + 2*r*exp(2*mu1) - 2*mu1r**2*r**3*exp(2*mu1) - nurr*r**3*exp(2*mu1) - 8*nur*self.xi*exp(2*mu1) + 8*ka*p*r*self.xi*(-1 + exp(2*mu1))*exp(2*mu1) + 2*mu1r*(-4*self.xi + 2*(r**2 + 2*self.xi)*exp(2*mu1) + nur*r*(8*self.xi + r**2*exp(2*mu1))) + r**3*self.msq*exp(4*mu1))) + 8*bph*r**2*self.xi*exp(4*mu1)*(-(bphrr*psi*r*(6*mu1r*r**2*exp(2*mu1) + r*(-5 + exp(2*mu1))*exp(2*mu1) - 2*nur*(-8*self.xi + (r**2 + 8*self.xi)*exp(2*mu1)))) + exp(2*mu1)*(mu1r*(3 + 2*nurr*r**2 + 2*nur*r*(-4 + exp(2*mu1)) - 3*exp(2*mu1)) - 2*mu1r**2*r*(-2 + 4*nur*r + exp(2*mu1)) + (-1 + exp(2*mu1))*(3*nur + r*(-nurr + ka*pr*r*exp(2*mu1)))) - 2*ka*p*r*(-1 - mu1r*r + exp(2*mu1))*exp(4*mu1) + psi**2*(-56*nur*self.xi*(-1 + exp(2*mu1)) - 16*nur**2*r*self.xi*(-1 + exp(2*mu1)) + 4*mu1r**2*r**3*exp(2*mu1) + mu1r*r*(r*(-10 + exp(2*mu1))*exp(2*mu1) - 4*nur*(-8*self.xi + (r**2 + 12*self.xi)*exp(2*mu1))) + r*(-5*exp(2*mu1) + 2*nurr*(-4*self.xi + (r**2 + 4*self.xi)*exp(2*mu1)) + (1 - 2*r**2*self.msq)*exp(4*mu1)))) - 4*bph**2*self.xi*(-8*bphrr*psi**2*r**2*self.xi*exp(2*mu1)*(6*mu1r*r**2*exp(2*mu1) + r*(-5 + exp(2*mu1))*exp(2*mu1) - 2*nur*(-8*self.xi + (r**2 + 8*self.xi)*exp(2*mu1))) - 16*bphrr*r**2*self.xi*(-1 + exp(2*mu1))*(mu1r*(1 - 7*nur*r) + nur*(1 + nur*r) + ka*p*r*exp(2*mu1))*exp(4*mu1) - 8*psi**3*self.xi*(16*nur**2*self.xi*(-1 + exp(2*mu1))*(-8*self.xi + (r**2 + 8*self.xi)*exp(2*mu1)) + r**2*exp(2*mu1)*(exp(2*mu1)*(5 + (-1 + 2*r**2*self.msq)*exp(2*mu1)) - 2*nurr*(-8*self.xi + (r**2 + 8*self.xi)*exp(2*mu1))) + 2*mu1r*r**2*exp(2*mu1)*(5*r*exp(2*mu1) + 2*nur*(-12*self.xi + (r**2 + 12*self.xi)*exp(2*mu1))) - 4*mu1r**2*r**4*exp(4*mu1) - 8*nur*r*self.xi*exp(2*mu1)*(9 - 10*exp(2*mu1) + exp(4*mu1))) + psi*exp(2*mu1)*(-32*mu1r**2*r**2*self.xi*exp(2*mu1)*(-1 + nur*r*(3 + 4*exp(2*mu1))) + 16*ka*p*r*self.xi*exp(2*mu1)*(-((-1 + exp(2*mu1))*(8*nur*self.xi*(-1 + exp(2*mu1)) + r*exp(2*mu1))) + 2*mu1r*r**2*exp(4*mu1)) + (-1 + exp(2*mu1))*(-16*nur*r*self.xi*exp(2*mu1)*(2 + r**2*self.msq*exp(2*mu1)) + 16*nur**2*self.xi*(-8*self.xi + (-3*r**2 + 8*self.xi)*exp(2*mu1)) + r**2*exp(2*mu1)*(16*nurr*self.xi + 16*ka*pr*r*self.xi*exp(2*mu1) + 3*r**2*self.msq*exp(4*mu1))) + 16*mu1r*self.xi*(2*nur**2*r*(8*self.xi + (r**2 - 8*self.xi)*exp(2*mu1)) + r*exp(2*mu1)*(2 - 2*exp(2*mu1) + nurr*r**2*(3 + exp(2*mu1))) - nur*(8*self.xi + (3*r**2 - 16*self.xi)*exp(2*mu1) + (3*r**2 + 8*self.xi)*exp(4*mu1))))) + 32*bph**4*self.xi**2*(psi*exp(4*mu1)*(-512*mu1r**2*nur**2*self.xi**2 - r*self.msq*(-1 + exp(2*mu1))*(-8*nur*self.xi*(3 + exp(2*mu1)) + r*(16*nurr*self.xi + exp(2*mu1))) + 2*mu1r*r**2*self.msq*(-16*nur*self.xi + r*exp(4*mu1))) - bphrr*(-1 + exp(2*mu1))*(-256*mu1r*nur**2*self.xi**2*(-1 + 2*exp(2*mu1)) - 16*nur*r**2*self.msq*self.xi*exp(4*mu1) + r**3*self.msq*exp(6*mu1))) + 8*bph**3*self.xi*(64*bphrr*nur*psi*self.xi**2*(-1 + exp(2*mu1))*(6*mu1r*r**2*exp(2*mu1) + r*(-5 + exp(2*mu1))*exp(2*mu1) - 2*nur*(-8*self.xi + (r**2 + 8*self.xi)*exp(2*mu1))) + 8*psi**2*self.xi*(4*nur*self.xi*exp(2*mu1)*(5 + 4*mu1r*r*(-1 + exp(2*mu1)) - 6*exp(2*mu1) - 12*mu1r**2*r**2*exp(2*mu1) + exp(4*mu1)) + r*exp(2*mu1)*(r**2*self.msq*(-1 + exp(2*mu1))*exp(4*mu1) - 4*nurr*self.xi*(5 - 6*exp(2*mu1) - 2*mu1r*r*(1 + exp(2*mu1)) + exp(4*mu1))) + 16*nur**2*self.xi*(r*exp(2*mu1) - r*exp(4*mu1) + mu1r*(8*self.xi - 16*self.xi*exp(2*mu1) + (r**2 + 8*self.xi)*exp(4*mu1)))) + exp(2*mu1)*(256*mu1r**2*nur**2*r*self.xi**2*exp(2*mu1) + (-1 + exp(2*mu1))*exp(2*mu1)*(-8*nur*self.xi*(8*ka*p*self.xi*(-1 + exp(2*mu1)) + r*(8*ka*pr*self.xi*(-1 + exp(2*mu1)) + 3*r*self.msq*exp(2*mu1))) + r*(8*nurr*self.xi*(8*ka*p*self.xi*(-1 + exp(2*mu1)) + r**2*self.msq*exp(2*mu1)) + r**2*self.msq*exp(4*mu1))) - mu1r*(128*nur**2*self.xi**2*(-1 + exp(2*mu1)) - 64*nurr*self.xi**2*(-1 + exp(2*mu1))**2 + 16*nur*r*self.xi*exp(2*mu1)*(8*ka*p*self.xi*(-1 + exp(2*mu1))**2 + r**2*self.msq*(-2 + exp(2*mu1))*exp(2*mu1)) + r**4*self.msq*exp(6*mu1))))))/(-64*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) - 8*bph*psi*r**2*self.xi*exp(2*mu1) + r**3*exp(4*mu1))**2))/(2.*r*(-32*bph**2*self.xi**2*exp(2*mu1)*(-2*psi**2*r**2 + (-1 + exp(2*mu1))*(-1 + 4*nur*r + exp(2*mu1))) - 16*bph*psi*r**3*self.xi*exp(4*mu1) + 256*bph**3*nur*psi*self.xi**3*(-3 + 2*exp(2*mu1) + exp(4*mu1)) + r**4*exp(6*mu1)))       
 
    def dddphdr(self, r, nu, mu1, bph, psi, p, e, csq):
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)
        pr = self.dpdr(r, nu, mu1, bph, psi ,p ,e)
        nurr = self.ddnudr( r, nu, mu1, bph, psi, p, e, csq)  
        mu1rr = self.ddmu1dr( r, nu, mu1, bph, psi, p, e, csq) 
        
        return (2048*bph**6*psi*r*self.msq*self.xi**4*(-1 + exp(2*mu1))*exp(4*mu1)*(4*nur**3*r**2*exp(2*mu1) - nurr*r*(3 - 4*exp(2*mu1) + exp(4*mu1)) + nur*(1 + 2*mu1r*r)*(3 - 4*exp(2*mu1) + exp(4*mu1))) + r**5*(bphrr*psi**2*r**2*exp(2*mu1)*(-24*self.xi + (r**2 + 24*self.xi)*exp(2*mu1)) + 2*bphrr*r**2*(-2 + 3*mu1r*r - nur*r)*exp(4*mu1) + psi**3*(-24*r*self.xi*(-1 + exp(2*mu1))*exp(2*mu1) - mu1r*r**2*exp(2*mu1)*(-56*self.xi + (r**2 + 24*self.xi)*exp(2*mu1)) + nur*(-128*self.xi**2 - 16*(r**2 - 8*self.xi)*self.xi*exp(2*mu1) + r**2*(r**2 + 16*self.xi)*exp(4*mu1))) + psi*exp(2*mu1)*(16*ka*p*r*self.xi*(-1 + exp(2*mu1))*exp(2*mu1) + (ka*pr*r**4*exp(4*mu1))/csq + 2*(r*exp(2*mu1)*(1 - nurr*r**2 + (1 + r**2*self.msq)*exp(2*mu1)) + 4*mu1r*(-2*self.xi + 4*nur*r*self.xi + (r**2 + 2*self.xi)*exp(2*mu1)) + nur*(-((-1 + exp(2*mu1))*(8*self.xi + r**2*exp(2*mu1))) + e*ka*r**4*exp(4*mu1)))))*exp(6*mu1) + bph*r**3*exp(4*mu1)*(-16*bphrr*psi**3*r**3*self.xi*exp(2*mu1)*(-24*self.xi + (r**2 + 24*self.xi)*exp(2*mu1)) + 8*self.xi*((ka*pr*r**3*exp(2*mu1)*(-1 + 2*nur*r + exp(2*mu1)))/csq + 2*(2*mu1r**2*r**2*(1 - 2*nur*r) - mu1r*r*(-3 + 6*nur*r + 4*nur**2*r**2 - 2*nurr*r**2 + 3*exp(2*mu1)) + 2*nur**2*r**2*(1 - exp(2*mu1) + e*ka*r**2*exp(2*mu1)) + nur*r*(-1 + exp(2*mu1))*(6 - exp(2*mu1) + e*ka*r**2*exp(2*mu1)) + (-1 + exp(2*mu1))*(-1 - nurr*r**2 + exp(2*mu1) + ka*pr*r**3*exp(2*mu1))))*exp(4*mu1) + 32*ka*p*r**2*self.xi*exp(4*mu1)*((1 + mu1r*r - exp(2*mu1))*exp(2*mu1) + 2*psi**2*self.xi*(3 - 4*exp(2*mu1) + exp(4*mu1))) + 8*bphrr*psi*r*self.xi*exp(2*mu1)*(24*self.xi + 17*r**2*exp(2*mu1) - 14*mu1r*r**3*exp(2*mu1) - 48*self.xi*exp(2*mu1) - 5*r**2*exp(4*mu1) + 24*self.xi*exp(4*mu1) + nur*r*(-80*self.xi + (7*r**2 + 80*self.xi)*exp(2*mu1) + r**2*exp(4*mu1))) + 16*psi**4*r*self.xi*(mu1r*r**2*exp(2*mu1)*(-56*self.xi + (r**2 + 24*self.xi)*exp(2*mu1)) - 2*r*self.xi*exp(2*mu1)*(11 - 12*exp(2*mu1) + exp(4*mu1)) + nur*(96*self.xi**2 + 16*(r**2 - 8*self.xi)*self.xi*exp(2*mu1) - (r**4 + 16*r**2*self.xi - 32*self.xi**2)*exp(4*mu1))) + psi**2*exp(2*mu1)*(-128*self.xi**2 + 1088*nur*r*self.xi**2 - 128*nurr*r**2*self.xi**2 - 96*r**2*self.xi*exp(2*mu1) - 40*nur*r**3*self.xi*exp(2*mu1) - 48*mu1r**2*r**4*self.xi*exp(2*mu1) + 16*nur**2*r**4*self.xi*exp(2*mu1) + 56*nurr*r**4*self.xi*exp(2*mu1) + 256*self.xi**2*exp(2*mu1) - 1152*nur*r*self.xi**2*exp(2*mu1) + 128*nurr*r**2*self.xi**2*exp(2*mu1) + 40*nur*r**3*self.xi*exp(4*mu1) - 8*nurr*r**4*self.xi*exp(4*mu1) - 32*e*ka*nur*r**5*self.xi*exp(4*mu1) - (16*ka*pr*r**5*self.xi*exp(4*mu1))/csq - 56*r**4*self.msq*self.xi*exp(4*mu1) - 128*self.xi**2*exp(4*mu1) + 64*nur*r*self.xi**2*exp(4*mu1) - 8*mu1r*r*self.xi*(32*self.xi + (37*r**2 - 48*self.xi)*exp(2*mu1) + 2*nur*r*(-64*self.xi + (r**2 + 64*self.xi)*exp(2*mu1)) + (-7*r**2 + 16*self.xi)*exp(4*mu1)) + r**6*self.msq*exp(6*mu1) + 8*r**4*self.msq*self.xi*exp(6*mu1))) - 256*bph**5*self.xi**3*(2*r**2*self.msq*(2*nur**3*r**2 + nur**2*r*(-1 + exp(2*mu1)) + nurr*r*(-1 + exp(2*mu1)) - nur*(1 + 2*mu1r*r)*(-1 + exp(2*mu1)))*(-1 + exp(2*mu1))*exp(6*mu1) + bphrr*psi*(-1 + exp(2*mu1))*(-512*nur**3*r*self.xi**2*(-1 + exp(2*mu1))*exp(2*mu1) + 256*nur**2*self.xi**2*(2*(-1 + exp(2*mu1))*exp(2*mu1) + mu1r*r*(-3 + exp(4*mu1))) - 16*nur*r**3*self.msq*self.xi*(-3 + exp(2*mu1))*exp(4*mu1) + r**4*self.msq*(-3 + exp(2*mu1))*exp(6*mu1)) + psi**2*exp(2*mu1)*(1024*mu1r**2*nur**2*r*self.xi**2*(-3 + 2*exp(2*mu1)) - 2*mu1r*(-3 + exp(2*mu1))*(256*nur**2*self.xi**2*(-1 + exp(2*mu1)) - 256*nur**3*r*self.xi**2*(-1 + exp(2*mu1)) - 16*nur*r**3*self.msq*self.xi*exp(2*mu1) + r**4*self.msq*exp(6*mu1)) + r**2*self.msq*exp(2*mu1)*(-2*nur**2*r*exp(2*mu1)*(16*self.xi*(-1 + exp(2*mu1)) + r**2*(-1 + 3*exp(2*mu1))) + r*(16*nurr*self.xi + exp(2*mu1))*(3 - 4*exp(2*mu1) + exp(4*mu1)) - 8*nur*self.xi*(9 - 9*exp(2*mu1) - exp(4*mu1) + exp(6*mu1))))) + bph**2*r**2*exp(2*mu1)*(64*bphrr*psi**4*r**3*self.xi**2*exp(2*mu1)*(-24*self.xi + (r**2 + 24*self.xi)*exp(2*mu1)) - 64*psi**5*r**2*self.xi**2*exp(2*mu1)*(16*self.xi*(-1 + exp(2*mu1)) - nur*r*(-16*self.xi + (r**2 + 16*self.xi)*exp(2*mu1)) + mu1r*r*(-56*self.xi + (r**2 + 24*self.xi)*exp(2*mu1))) + 64*bphrr*r*self.xi**2*exp(4*mu1)*(-2 + 4*nur*r - 6*nur**2*r**2 + 4*exp(2*mu1) - 6*nur*r*exp(2*mu1) + 6*nur**2*r**2*exp(2*mu1) + 2*ka*p*r**2*(-1 + exp(2*mu1))*exp(2*mu1) - 2*exp(4*mu1) + 2*nur*r*exp(4*mu1) - mu1r*r*(4*nur*r*(-7 + 5*exp(2*mu1)) + 3*(3 - 4*exp(2*mu1) + exp(4*mu1)))) - 64*bphrr*psi**2*r*self.xi**2*exp(2*mu1)*(24*self.xi + 23*r**2*exp(2*mu1) - 10*mu1r*r**3*exp(2*mu1) - 48*self.xi*exp(2*mu1) - 12*r**2*exp(4*mu1) + 24*self.xi*exp(4*mu1) + nur*r*(-88*self.xi + (5*r**2 + 32*self.xi)*exp(2*mu1) + (5*r**2 + 56*self.xi)*exp(4*mu1)) + r**2*exp(6*mu1)) + 16*psi**3*self.xi*(512*nur**2*self.xi**3 + 64*self.xi**2*exp(2*mu1) - 1088*nur*r*self.xi**2*exp(2*mu1) - 192*nur**2*r**2*self.xi**2*exp(2*mu1) + 160*nurr*r**2*self.xi**2*exp(2*mu1) - 1024*nur**2*self.xi**3*exp(2*mu1) + 72*r**2*self.xi*exp(4*mu1) + 12*nur*r**3*self.xi*exp(4*mu1) + 48*mu1r**2*r**4*self.xi*exp(4*mu1) - 4*nur**2*r**4*self.xi*exp(4*mu1) - 32*nurr*r**4*self.xi*exp(4*mu1) - 128*self.xi**2*exp(4*mu1) + 1216*nur*r*self.xi**2*exp(4*mu1) + 448*nur**2*r**2*self.xi**2*exp(4*mu1) - 192*nurr*r**2*self.xi**2*exp(4*mu1) + 512*nur**2*self.xi**3*exp(4*mu1) - 28*r**2*self.xi*exp(6*mu1) - 12*nur*r**3*self.xi*exp(6*mu1) - 12*nur**2*r**4*self.xi*exp(6*mu1) + 8*nurr*r**4*self.xi*exp(6*mu1) + 8*e*ka*nur*r**5*self.xi*exp(6*mu1) + (4*ka*pr*r**5*self.xi*exp(6*mu1))/csq + 32*r**4*self.msq*self.xi*exp(6*mu1) + 64*self.xi**2*exp(6*mu1) - 128*nur*r*self.xi**2*exp(6*mu1) - 256*nur**2*r**2*self.xi**2*exp(6*mu1) + 32*nurr*r**2*self.xi**2*exp(6*mu1) + 4*mu1r*r*self.xi*exp(2*mu1)*(56*self.xi + (51*r**2 - 80*self.xi)*exp(2*mu1) - 8*(2*r**2 - 3*self.xi)*exp(4*mu1) + nur*r*(-200*self.xi + (r**2 + 80*self.xi)*exp(2*mu1) + 3*(r**2 + 8*self.xi)*exp(4*mu1)) + r**2*exp(6*mu1)) - r**6*self.msq*exp(8*mu1) + 4*r**2*self.xi*exp(8*mu1) - 8*r**4*self.msq*self.xi*exp(8*mu1)) + psi*exp(2*mu1)*(1024*mu1r*nur*self.xi**3 - 1024*nur**2*self.xi**3 - 2048*mu1r*nur**2*r*self.xi**3 - 128*self.xi**2*exp(2*mu1) - 448*mu1r*r*self.xi**2*exp(2*mu1) + 576*nur*r*self.xi**2*exp(2*mu1) + 512*mu1r*nur*r**2*self.xi**2*exp(2*mu1) - 512*nur**2*r**2*self.xi**2*exp(2*mu1) - 64*nurr*r**2*self.xi**2*exp(2*mu1) + 512*mu1r**2*nur*r**3*self.xi**2*exp(2*mu1) + 768*mu1r*nur**2*r**3*self.xi**2*exp(2*mu1) - 768*mu1r*nurr*r**3*self.xi**2*exp(2*mu1) - 2048*mu1r*nur*self.xi**3*exp(2*mu1) + 2048*nur**2*self.xi**3*exp(2*mu1) + 2048*mu1r*nur**2*r*self.xi**3*exp(2*mu1) - 128*ka*p*r*self.xi**2*exp(2*mu1)*(mu1r*r**2*exp(2*mu1)*(3 + exp(2*mu1)) + (-1 + exp(2*mu1))*(-8*nur*self.xi*(-1 + exp(2*mu1)) + r*(-4 + exp(2*mu1))*exp(2*mu1))) + 256*self.xi**2*exp(4*mu1) + 512*mu1r*r*self.xi**2*exp(4*mu1) - 512*nur*r*self.xi**2*exp(4*mu1) - 512*mu1r**2*r**2*self.xi**2*exp(4*mu1) + 512*mu1r*nur*r**2*self.xi**2*exp(4*mu1) + 128*nur**2*r**2*self.xi**2*exp(4*mu1) + 128*nurr*r**2*self.xi**2*exp(4*mu1) + 128*e*ka*nur*r**3*self.xi**2*exp(4*mu1) + 512*mu1r*nur**2*r**3*self.xi**2*exp(4*mu1) + 320*ka*pr*r**3*self.xi**2*exp(4*mu1) - 128*e*ka*nur**2*r**4*self.xi**2*exp(4*mu1) - 128*nur*r**3*self.msq*self.xi**2*exp(4*mu1) + 1024*mu1r*nur*self.xi**3*exp(4*mu1) - 1024*nur**2*self.xi**3*exp(4*mu1) - (64*ka*pr*r**3*self.xi**2*(-1 + exp(2*mu1) + nur*r*(1 + 3*exp(2*mu1)))*exp(4*mu1))/csq + 16*r**4*self.msq*self.xi*exp(6*mu1) + 16*nur*r**5*self.msq*self.xi*exp(6*mu1) - 128*self.xi**2*exp(6*mu1) - 64*mu1r*r*self.xi**2*exp(6*mu1) - 64*nur*r*self.xi**2*exp(6*mu1) + 384*nur**2*r**2*self.xi**2*exp(6*mu1) - 64*nurr*r**2*self.xi**2*exp(6*mu1) - 128*e*ka*nur*r**3*self.xi**2*exp(6*mu1) - 384*ka*pr*r**3*self.xi**2*exp(6*mu1) - 384*e*ka*nur**2*r**4*self.xi**2*exp(6*mu1) + 128*nur*r**3*self.msq*self.xi**2*exp(6*mu1) + nur*r**7*self.msq*exp(8*mu1) - 16*r**4*self.msq*self.xi*exp(8*mu1) + 64*ka*pr*r**3*self.xi**2*exp(8*mu1))) + 64*bph**4*self.xi**2*(64*bphrr*nur*psi**2*r*self.xi**2*(-(mu1r*r**2*exp(2*mu1)*(-11 + 3*exp(4*mu1))) + (-1 + exp(2*mu1))*(r*exp(2*mu1)*(17 - 14*exp(2*mu1) + exp(4*mu1)) + 2*nur*(-24*self.xi + 2*(r**2 + 4*self.xi)*exp(2*mu1) + (3*r**2 + 16*self.xi)*exp(4*mu1)))) - bphrr*(-1 + exp(2*mu1))*exp(2*mu1)*(256*nur**3*r**2*self.xi**2*(-1 + exp(2*mu1)) - 128*nur**2*r*self.xi**2*(-3 + 4*exp(2*mu1) + mu1r*r*(-9 + 7*exp(2*mu1)) - exp(4*mu1)) - 16*nur*self.xi*(8*self.xi - 16*self.xi*exp(2*mu1) + (r**4*self.msq + 8*self.xi)*exp(4*mu1) + 4*mu1r*r*self.xi*(7 - 10*exp(2*mu1) + 3*exp(4*mu1))) + r**5*self.msq*exp(6*mu1)) + psi**3*(128*nur**3*r*self.xi**2*(-1 + exp(2*mu1))*exp(2*mu1)*(-16*self.xi + (r**2 + 16*self.xi)*exp(2*mu1)) + 8*r**2*self.xi*(-3 + exp(2*mu1))*exp(2*mu1)*(r**2*self.msq*(-1 + exp(2*mu1))*exp(4*mu1) - 4*nurr*self.xi*(5 - 6*exp(2*mu1) - 2*mu1r*r*(1 + exp(2*mu1)) + exp(4*mu1))) + nur*r*exp(2*mu1)*(-480*self.xi**2 + 736*self.xi**2*exp(2*mu1) - 256*mu1r**2*r**2*self.xi**2*(-3 + 5*exp(2*mu1)) - 8*self.xi*(r**4*self.msq + 36*self.xi)*exp(4*mu1) + 256*mu1r*r*self.xi**2*(3 - 7*exp(2*mu1) + 2*exp(4*mu1)) + (r**6*self.msq + 24*r**4*self.msq*self.xi + 32*self.xi**2)*exp(6*mu1)) - 128*nur**2*self.xi**2*((r**2*(-3 + exp(2*mu1)) + 16*self.xi*(-1 + exp(2*mu1)))*(-1 + exp(2*mu1))*exp(2*mu1) + mu1r*r*(24*self.xi + 3*r**2*exp(2*mu1) - 8*(r**2 + 5*self.xi)*exp(4*mu1) + (3*r**2 + 16*self.xi)*exp(6*mu1)))) + psi*exp(2*mu1)*(128*mu1r**2*nur*r*self.xi**2*(4*nur*r*(-3 + exp(2*mu1)) - (-6 + exp(2*mu1))*(-1 + exp(2*mu1))**2) + exp(2*mu1)*(256*nur**3*r*self.xi**2*(-1 + exp(2*mu1))*(1 - exp(2*mu1) + e*ka*r**2*exp(2*mu1)) + r**2*(-1 + exp(2*mu1))*(r**2*self.msq*(-4 + exp(2*mu1))*exp(4*mu1) + 8*nurr*self.xi*(r**2*self.msq*(-5 + exp(2*mu1))*exp(2*mu1) + 8*ka*p*self.xi*(3 - 4*exp(2*mu1) + exp(4*mu1)))) - nur*r*(-1 + exp(2*mu1))*(64*ka*p*self.xi**2*(3 - 4*exp(2*mu1) + exp(4*mu1)) + r*(r*self.msq*exp(2*mu1)*(-104*self.xi + (r**2 + 24*self.xi)*exp(2*mu1)) + 64*ka*pr*self.xi**2*(3 - 4*exp(2*mu1) + exp(4*mu1)))) - nur**2*(-256*self.xi**2 - 16*(r**4*self.msq - 32*self.xi)*self.xi*exp(2*mu1) - (128*ka*pr*r**3*self.xi**2*(-1 + exp(2*mu1))*exp(2*mu1))/csq + (r**6*self.msq + 16*r**4*self.msq*self.xi - 256*self.xi**2)*exp(4*mu1) + 3*r**6*self.msq*exp(6*mu1))) + mu1r*(-256*nur**3*r**2*self.xi**2*(-3 + 2*exp(2*mu1) + exp(4*mu1)) + 128*nur**2*r*self.xi**2*(-12 + 19*exp(2*mu1) - 8*exp(4*mu1) + exp(6*mu1)) + r*(64*nurr*self.xi**2*(-3 + exp(2*mu1))*(-1 + exp(2*mu1))**2 + r**4*self.msq*(3 + exp(2*mu1))*exp(6*mu1)) - 16*nur*self.xi*(-24*self.xi + 56*self.xi*exp(2*mu1) + 8*ka*p*r**2*self.xi*(-3 + exp(2*mu1))*(-1 + exp(2*mu1))**2*exp(2*mu1) + 8*(r**4*self.msq - 5*self.xi)*exp(4*mu1) + (-5*r**4*self.msq + 8*self.xi)*exp(6*mu1) + r**4*self.msq*exp(8*mu1))))) + 8*bph**3*self.xi*(32*bphrr*psi**3*r**3*self.xi**2*exp(4*mu1)*(-4*mu1r*r**2 + 8*nur*(-16*self.xi + (r**2 + 16*self.xi)*exp(2*mu1)) + r*(19 - 12*exp(2*mu1) + exp(4*mu1))) + 64*bphrr*psi*r*self.xi**2*exp(2*mu1)*(ka*p*r**3*exp(4*mu1)*(3 - 4*exp(2*mu1) + exp(4*mu1)) + 2*mu1r*r**2*exp(2*mu1)*(5 - 7*exp(2*mu1) + 2*exp(4*mu1) + nur*r*(-20 + 11*exp(2*mu1) + exp(4*mu1))) - (-1 + exp(2*mu1))*(-2*r*(-1 + exp(2*mu1))*exp(2*mu1) + nur**2*r*(-80*self.xi + (11*r**2 + 80*self.xi)*exp(2*mu1) + 5*r**2*exp(4*mu1)) + nur*(24*self.xi + 8*(r**2 - 6*self.xi)*exp(2*mu1) - 6*(r**2 - 4*self.xi)*exp(4*mu1)))) + exp(4*mu1)*(256*mu1r**2*nur*r**2*self.xi**2*(2*nur*r - (-1 + exp(2*mu1))**2) - 256*nur**3*r**2*self.xi**2*(-1 + exp(2*mu1))*(1 - exp(2*mu1) + e*ka*r**2*exp(2*mu1)) + 2*r**3*(-1 + exp(2*mu1))*exp(2*mu1)*(8*nurr*self.xi*(8*ka*p*self.xi*(-1 + exp(2*mu1)) + r**2*self.msq*exp(2*mu1)) + r**2*self.msq*exp(4*mu1)) - 2*mu1r*r**2*(-256*nur**3*r*self.xi**2*(-1 + exp(2*mu1)) - 64*nurr*self.xi**2*(-1 + exp(2*mu1))**2 + 16*nur*r*self.xi*exp(2*mu1)*(8*ka*p*self.xi*(-1 + exp(2*mu1))**2 + r**2*self.msq*(-2 + exp(2*mu1))*exp(2*mu1)) - 128*nur**2*self.xi**2*(2 - 3*exp(2*mu1) + exp(4*mu1)) + r**4*self.msq*exp(6*mu1)) + nur*(-1 + exp(2*mu1))*(-128*self.xi**2 + 256*self.xi**2*exp(2*mu1) + 128*ka*pr*r**3*self.xi**2*exp(2*mu1) - 128*ka*p*r**2*self.xi**2*(-1 + exp(2*mu1))*exp(2*mu1) - (64*ka*pr*r**3*self.xi**2*(-1 + exp(2*mu1))*exp(2*mu1))/csq - 48*r**4*self.msq*self.xi*exp(4*mu1) - 128*self.xi**2*exp(4*mu1) - 128*ka*pr*r**3*self.xi**2*exp(4*mu1) + r**6*self.msq*exp(6*mu1)) + 2*nur**2*r*(-192*self.xi**2 + 448*self.xi**2*exp(2*mu1) - (64*ka*pr*r**3*self.xi**2*(-1 + exp(2*mu1))*exp(2*mu1))/csq - 64*e*ka*r**2*self.xi**2*(-1 + exp(2*mu1))**2*exp(2*mu1) - 320*self.xi**2*exp(4*mu1) + r**6*self.msq*exp(6*mu1) + 64*self.xi**2*exp(6*mu1))) + 8*psi**4*r*self.xi*(-48*mu1r**2*r**4*self.xi*exp(4*mu1) - 8*mu1r*r**2*self.xi*exp(2*mu1)*(-7*r*(-3 + exp(2*mu1))*exp(2*mu1) + nur*(-16*self.xi - (r**2 + 96*self.xi)*exp(2*mu1) + 3*(r**2 + 16*self.xi)*exp(4*mu1))) - 32*nur*r*self.xi**2*exp(2*mu1)*(-23 + 23*exp(2*mu1) - exp(4*mu1) + exp(6*mu1)) + r**2*exp(2*mu1)*(-60*self.xi*exp(2*mu1) - 8*nurr*self.xi*(-3 + exp(2*mu1))*(-8*self.xi + (r**2 + 8*self.xi)*exp(2*mu1)) - 8*(-4 + 3*r**2*self.msq)*self.xi*exp(4*mu1) + (r**4*self.msq - 4*self.xi + 8*r**2*self.msq*self.xi)*exp(6*mu1)) + 8*nur**2*self.xi*(-192*self.xi**2 + 8*self.xi*(5*r**2 + 56*self.xi)*exp(2*mu1) - (r**4 + 96*r**2*self.xi + 320*self.xi**2)*exp(4*mu1) + (3*r**4 + 56*r**2*self.xi + 64*self.xi**2)*exp(6*mu1))) - 2*psi**2*exp(2*mu1)*(512*nur*self.xi**3 - 2304*nur**2*r*self.xi**3 + 1024*nur**3*r**2*self.xi**3 - 416*nur*r**2*self.xi**2*exp(2*mu1) - 320*nur**2*r**3*self.xi**2*exp(2*mu1) + 256*nurr*r**3*self.xi**2*exp(2*mu1) - 64*nur**3*r**4*self.xi**2*exp(2*mu1) - 1536*nur*self.xi**3*exp(2*mu1) + 5376*nur**2*r*self.xi**3*exp(2*mu1) - 2048*nur**3*r**2*self.xi**3*exp(2*mu1) + 704*nur*r**2*self.xi**2*exp(4*mu1) + 192*nur**2*r**3*self.xi**2*exp(4*mu1) - 320*nurr*r**3*self.xi**2*exp(4*mu1) + 64*nur**3*r**4*self.xi**2*exp(4*mu1) + 96*ka*pr*r**4*self.xi**2*exp(4*mu1) + 64*e*ka*nur**2*r**5*self.xi**2*exp(4*mu1) + (32*ka*nur*pr*r**5*self.xi**2*exp(4*mu1))/csq - 96*nur*r**4*self.msq*self.xi**2*exp(4*mu1) + 1536*nur*self.xi**3*exp(4*mu1) - 3840*nur**2*r*self.xi**3*exp(4*mu1) + 1024*nur**3*r**2*self.xi**3*exp(4*mu1) + 32*ka*p*r**2*self.xi**2*(-3 + exp(2*mu1))*exp(2*mu1)*(-((-1 + exp(2*mu1))*(8*nur*self.xi*(-1 + exp(2*mu1)) + r*exp(2*mu1))) + 2*mu1r*r**2*exp(4*mu1)) - 64*mu1r**2*r**3*self.xi**2*exp(2*mu1)*(-3 + 6*exp(2*mu1) - exp(4*mu1) + nur*r*(-5 + 8*exp(2*mu1) + exp(4*mu1))) + 22*r**5*self.msq*self.xi*exp(6*mu1) + 4*nur*r**6*self.msq*self.xi*exp(6*mu1) - 288*nur*r**2*self.xi**2*exp(6*mu1) + 128*nur**2*r**3*self.xi**2*exp(6*mu1) + 64*nurr*r**3*self.xi**2*exp(6*mu1) - 128*ka*pr*r**4*self.xi**2*exp(6*mu1) - 192*e*ka*nur**2*r**5*self.xi**2*exp(6*mu1) - (96*ka*nur*pr*r**5*self.xi**2*exp(6*mu1))/csq + 128*nur*r**4*self.msq*self.xi**2*exp(6*mu1) - 512*nur*self.xi**3*exp(6*mu1) + 768*nur**2*r*self.xi**3*exp(6*mu1) - 32*mu1r*r*self.xi**2*(-(nurr*r**3*exp(2*mu1)*(-11 - 2*exp(2*mu1) + exp(4*mu1))) + 2*nur**2*r*(96*self.xi + (r**2 - 144*self.xi)*exp(2*mu1) - 12*(r**2 - 4*self.xi)*exp(4*mu1) + 3*r**2*exp(6*mu1)) + 4*nur*(-20*self.xi + 48*self.xi*exp(2*mu1) + (r**2 - 36*self.xi)*exp(4*mu1) + 8*self.xi*exp(6*mu1))) + nur*r**8*self.msq*exp(8*mu1) - 28*r**5*self.msq*self.xi*exp(8*mu1) + 12*nur*r**6*self.msq*self.xi*exp(8*mu1) + 32*ka*pr*r**4*self.xi**2*exp(8*mu1) - 32*nur*r**4*self.msq*self.xi**2*exp(8*mu1) + 6*r**5*self.msq*self.xi*exp(10*mu1))))/(2.*r*(-64*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) - 8*bph*psi*r**2*self.xi*exp(2*mu1) + r**3*exp(4*mu1))*(-32*bph**2*self.xi**2*exp(2*mu1)*(-2*psi**2*r**2 + (-1 + exp(2*mu1))*(-1 + 4*nur*r + exp(2*mu1))) - 16*bph*psi*r**3*self.xi*exp(4*mu1) + 256*bph**3*nur*psi*self.xi**3*(-3 + 2*exp(2*mu1) + exp(4*mu1)) + r**4*exp(6*mu1)))         

    def dddnudr(self, r, nu, mu1, bph, psi, p, e, csq):
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)
        pr = self.dpdr(r, nu, mu1, bph, psi ,p ,e)
        nurr = self.ddnudr(r, nu, mu1, bph, psi, p, e, csq)  
        mu1rr = self.ddmu1dr(r, nu, mu1, bph, psi, p, e, csq)
        bphrrr = self.dddphdr(r, nu, mu1, bph, psi, p, e, csq)
        
        return (32*bph*nur*psi*r**2*self.msq*self.xi*exp(4*mu1)*(-64*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) - 8*bph*psi*r**2*self.xi*exp(2*mu1) + r**3*exp(4*mu1)) - 4*bph*psi*r**3*self.msq*(-64*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) - 8*bph*psi*r**2*self.xi*exp(2*mu1) + r**3*exp(4*mu1))*exp(6*mu1) + 2*(-8*bph*r*(bphrr*r + 2*psi*(1 + mu1r*r))*self.xi*exp(2*mu1) - 64*bph**2*self.xi**2*(nurr*(-1 + exp(2*mu1)) + 2*mu1r*nur*exp(2*mu1)) + r**2*(3 + 4*mu1r*r)*exp(4*mu1))*(32*bph*nur*psi*r*(1 + mu1r*r)*self.xi*exp(2*mu1) - r**2*exp(2*mu1)*(2*(mu1r - nur)*(1 + nur*r)*exp(2*mu1) + psi**2*(16*nur*self.xi - r*exp(2*mu1)) + 2*ka*p*r*exp(4*mu1)) + bph**2*(128*mu1r*nur**2*self.xi**2*(-3 + exp(2*mu1)) - 128*nur**3*self.xi**2*(-1 + exp(2*mu1)) - 16*nur*r**2*self.msq*self.xi*exp(4*mu1) + r**3*self.msq*exp(6*mu1))) + 2*psi*self.xi*(8*nur*(-64*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) - 8*bph*psi*r**2*self.xi*exp(2*mu1) + r**3*exp(4*mu1))*(-4*psi*r*(1 + mu1r*r)*exp(2*mu1) + 2*bph*(-16*mu1r*nur*self.xi*(-3 + exp(2*mu1)) + 16*nur**2*self.xi*(-1 + exp(2*mu1)) + r**2*self.msq*exp(4*mu1))) - (128*bph*nur*self.xi*(-1 + exp(2*mu1)) + 8*psi*r**2*exp(2*mu1))*(32*bph*nur*psi*r*(1 + mu1r*r)*self.xi*exp(2*mu1) - r**2*exp(2*mu1)*(2*(mu1r - nur)*(1 + nur*r)*exp(2*mu1) + psi**2*(16*nur*self.xi - r*exp(2*mu1)) + 2*ka*p*r*exp(4*mu1)) + bph**2*(128*mu1r*nur**2*self.xi**2*(-3 + exp(2*mu1)) - 128*nur**3*self.xi**2*(-1 + exp(2*mu1)) - 16*nur*r**2*self.msq*self.xi*exp(4*mu1) + r**3*self.msq*exp(6*mu1)))) - 2*(-64*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) - 8*bph*psi*r**2*self.xi*exp(2*mu1) + r**3*exp(4*mu1))*(32*bph*(bphrr*nur*r*(1 + mu1r*r) + psi*(nurr*r*(1 + mu1r*r) + nur*(1 + 4*mu1r*r + 2*mu1r**2*r**2 + mu1rr*r**2)))*self.xi*exp(2*mu1) - r*exp(2*mu1)*(-2*bphrr*psi*r*(-16*nur*self.xi + r*exp(2*mu1)) + psi**2*(32*nur*self.xi + 16*nurr*r*self.xi - 3*r*exp(2*mu1) - 4*mu1r*r*(-8*nur*self.xi + r*exp(2*mu1))) + 2*exp(2*mu1)*(-3*nur**2*r + 4*mu1r**2*r*(1 + nur*r) + nur*(-2 + mu1rr*r**2 - 2*nurr*r**2) + mu1r*(2 - nur*r - 4*nur**2*r**2 + nurr*r**2) + r*(mu1rr - nurr + ka*pr*r*exp(2*mu1))) + 6*ka*p*r*(1 + 2*mu1r*r)*exp(4*mu1)) + bph**2*(128*nur**2*self.xi**2*(mu1rr*(-3 + exp(2*mu1)) - 3*nurr*(-1 + exp(2*mu1))) + 256*mu1r**2*nur**2*self.xi**2*exp(2*mu1) - 32*nur*r*self.msq*self.xi*exp(4*mu1) + r**2*self.msq*(-16*nurr*self.xi + 3*exp(2*mu1))*exp(4*mu1) + mu1r*(-256*nur**3*self.xi**2*exp(2*mu1) - 64*nur*self.xi*(-4*nurr*self.xi*(-3 + exp(2*mu1)) + r**2*self.msq*exp(4*mu1)) + 6*r**3*self.msq*exp(6*mu1)))))/(128*bph**2*nur*self.xi**2*(-1 + exp(2*mu1)) + 16*bph*psi*r**2*self.xi*exp(2*mu1) - 2*r**3*exp(4*mu1))**2
        
    
    # tidal equations; 1st-order l=2   
    def eh2f(self, r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi):
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)
        pr = self.dpdr(r, nu, mu1, bph, psi ,p ,e)
        nurr = self.ddnudr(r, nu, mu1, bph, psi, p, e, csq)  
        mu1rr = self.ddmu1dr(r, nu, mu1, bph, psi, p, e, csq)
        bphrrr = self.dddphdr(r, nu, mu1, bph, psi, p, e, csq)
        nurrr = self.dddnudr(r, nu, mu1, bph, psi, p, e, csq)
               
        return (16*bph*debph*(-(mu1r*nur) + nur**2 + nurr)*self.xi + eh0*(-8*bph*bphrr*self.xi + 8*bph*mu1r*psi*self.xi - 8*psi**2*self.xi + exp(2*mu1)))/(-8*bph*nur*psi*self.xi + exp(2*mu1))
   
    def deh0dr(self, r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi):
        l=2.
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)
        pr = self.dpdr(r, nu, mu1, bph, psi ,p ,e)
        nurr = self.ddnudr(r, nu, mu1, bph, psi, p, e, csq)  
        mu1rr = self.ddmu1dr(r, nu, mu1, bph, psi, p, e, csq)
        bphrrr = self.dddphdr(r, nu, mu1, bph, psi, p, e, csq) 
        nurrr = self.dddnudr(r, nu, mu1, bph, psi, p, e, csq)
        eh2 = self.eh2f(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi)
        
        return -(4*(exp(2*mu1) + nur*(-24*bph*psi*self.xi + r*exp(2*mu1)))*(eh0*(-1 + nur*r)*(-8*bph*psi*self.xi + r*exp(2*mu1)) + eh2*r*(exp(2*mu1) + nur*(-24*bph*psi*self.xi + r*exp(2*mu1))) - 2*(-8*bph*depsi*nur*r*self.xi + debph*(8*bph*nur*self.xi + psi*r*(-8*nur*self.xi + r*exp(2*mu1))))) - (-8*bph*nur*psi*self.xi + exp(2*mu1))*(-4*bph*(debph*exp(2*mu1)*(-4*l*(1 + l)*nur**2*r*self.xi + 4*l*(1 + l)*nur*(2 + mu1r*r)*self.xi + r*(-4*l*(1 + l)*nurr*self.xi + r**2*self.msq*exp(2*mu1))) - 2*self.xi*(eh0*(-(bphrr*r*(-1 + 2*nur*r + (1 + l + l**2)*exp(2*mu1))) + psi*(-2*nur**2*r**2 + nur*r*(-3 + exp(2*mu1)) + 2*(-(nurr*r**2) + l*(1 + l)*exp(2*mu1)) + mu1r*r*(-3 + 6*nur*r + (1 + l + l**2)*exp(2*mu1)))) + r*(eh2*(bphrr*(-1 - 2*nur*r + exp(2*mu1)) + psi*(-2*nur**2*r - 2*nurr*r + mu1r*(3 + 6*nur*r - exp(2*mu1)) + nur*(-21 + (3 + l + l**2)*exp(2*mu1)))) + 2*(-2*depsi*nur*(-3 + exp(2*mu1)) + ek*(-(bphrr*(-1 + exp(2*mu1))) + psi*(mu1r*(-3 + exp(2*mu1)) - nur*(-3 + (-1 + l + l**2)*exp(2*mu1)))))))) + bph**2*(eh0 + eh2 - 2*ek)*r**3*self.msq*exp(4*mu1) + r*(-(eh2*(8*psi**2*self.xi + 16*nur*psi**2*r*self.xi - 4*exp(2*mu1) + 4*mu1r*r*exp(2*mu1) - 8*nur*r*exp(2*mu1) + 2*mu1r*nur*r**2*exp(2*mu1) - 2*nur**2*r**2*exp(2*mu1) - 2*nurr*r**2*exp(2*mu1) - 8*psi**2*self.xi*exp(2*mu1) + l*exp(4*mu1) + l**2*exp(4*mu1) - e*ka*r**2*exp(4*mu1) + ka*p*r**2*exp(4*mu1))) - eh0*(-8*psi**2*self.xi + 16*nur*psi**2*r*self.xi - 4*nur*r*exp(2*mu1) + 2*mu1r*nur*r**2*exp(2*mu1) - 2*nur**2*r**2*exp(2*mu1) - 2*nurr*r**2*exp(2*mu1) + 8*psi**2*self.xi*exp(2*mu1) + 8*l*psi**2*self.xi*exp(2*mu1) + 8*l**2*psi**2*self.xi*exp(2*mu1) + l*exp(4*mu1) + l**2*exp(4*mu1) - e*ka*r**2*exp(4*mu1) + ka*p*r**2*exp(4*mu1)) + 2*(2*psi*(-8*debph*nur*self.xi*(-3 + exp(2*mu1)) + depsi*r**2*exp(2*mu1)) + ek*(8*psi**2*self.xi - 2*exp(2*mu1) + 2*mu1r*r*exp(2*mu1) - 2*nur*r*exp(2*mu1) - 8*psi**2*self.xi*exp(2*mu1) + l*exp(4*mu1) + l**2*exp(4*mu1) - e*ka*r**2*exp(4*mu1) + ka*p*r**2*exp(4*mu1))))))/(4.*r*(32*bph**2*nur*psi**2*self.xi**2*(3 + exp(2*mu1)) - 4*bph*psi*self.xi*exp(2*mu1)*(-1 + 6*nur*r + exp(2*mu1)) + nur*r**2*exp(4*mu1)))
        
    def dekdr(self, r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi):
        l=2.
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)
        pr = self.dpdr(r, nu, mu1, bph, psi ,p ,e)
        nurr = self.ddnudr(r, nu, mu1, bph, psi, p, e, csq)  
        mu1rr = self.ddmu1dr(r, nu, mu1, bph, psi, p, e, csq)
        bphrrr = self.dddphdr(r, nu, mu1, bph, psi, p, e, csq)
        nurrr = self.dddnudr(r, nu, mu1, bph, psi, p, e, csq)
        eh2 = self.eh2f(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi) 
   
        return (-4*bph*r*(debph*exp(2*mu1)*(-8*psi**2*r*self.xi*(-3 + exp(2*mu1)) - 4*l*(1 + l)*nur**2*r*self.xi*exp(2*mu1) + r*exp(2*mu1)*(-4*l*(1 + l)*nurr*self.xi + r**2*self.msq*exp(2*mu1)) + 4*nur*self.xi*(l*(1 + l)*mu1r*r*exp(2*mu1) + 2*(-2 + l*(1 + l)*exp(2*mu1)))) - 2*self.xi*(eh0*(8*psi**3*self.xi*(-1 + 2*nur*r + (1 + l + l**2)*exp(2*mu1)) - bphrr*r*exp(2*mu1)*(-1 + 2*nur*r + (1 + l + l**2)*exp(2*mu1)) + psi*exp(2*mu1)*(-10 - 3*mu1r*r + 3*nur*r + 8*mu1r*nur*r**2 - 4*nur**2*r**2 - 4*nurr*r**2 + 2*exp(2*mu1) + 3*l*exp(2*mu1) + 3*l**2*exp(2*mu1) + mu1r*r*exp(2*mu1) + l*mu1r*r*exp(2*mu1) + l**2*mu1r*r*exp(2*mu1) - nur*r*exp(2*mu1) - e*ka*r**2*exp(2*mu1) + ka*p*r**2*exp(2*mu1))) + eh2*(-8*psi**3*self.xi*(-1 - 2*nur*r + exp(2*mu1)) + bphrr*r*exp(2*mu1)*(-1 - 2*nur*r + exp(2*mu1)) + psi*exp(2*mu1)*(2 + 7*mu1r*r - 11*nur*r + 8*mu1r*nur*r**2 - 4*nur**2*r**2 - 4*nurr*r**2 - 2*exp(2*mu1) + l*exp(2*mu1) + l**2*exp(2*mu1) - mu1r*r*exp(2*mu1) + nur*r*exp(2*mu1) + l*nur*r*exp(2*mu1) + l**2*nur*r*exp(2*mu1) - e*ka*r**2*exp(2*mu1) + ka*p*r**2*exp(2*mu1))) - 2*(2*depsi*r*(psi**2*r + nur*(-1 + exp(2*mu1)))*exp(2*mu1) + ek*(-8*psi**3*self.xi*(-1 + exp(2*mu1)) + bphrr*r*(-1 + exp(2*mu1))*exp(2*mu1) + psi*exp(2*mu1)*(-2 + 5*mu1r*r - 5*nur*r + l*exp(2*mu1) + l**2*exp(2*mu1) - mu1r*r*exp(2*mu1) - nur*r*exp(2*mu1) + l*nur*r*exp(2*mu1) + l**2*nur*r*exp(2*mu1) - e*ka*r**2*exp(2*mu1) + ka*p*r**2*exp(2*mu1)))))) - 8*bph**3*(eh0 + eh2 - 2*ek)*psi*r**3*self.msq*self.xi*exp(4*mu1) + r**2*exp(2*mu1)*(-(eh2*(8*psi**2*self.xi + 16*nur*psi**2*r*self.xi + 4*mu1r*r*exp(2*mu1) - 4*nur*r*exp(2*mu1) + 2*mu1r*nur*r**2*exp(2*mu1) - 2*nur**2*r**2*exp(2*mu1) - 2*nurr*r**2*exp(2*mu1) - 8*psi**2*self.xi*exp(2*mu1) + l*exp(4*mu1) + l**2*exp(4*mu1) - e*ka*r**2*exp(4*mu1) + ka*p*r**2*exp(4*mu1))) - eh0*(-8*psi**2*self.xi + 16*nur*psi**2*r*self.xi - 4*exp(2*mu1) + 2*mu1r*nur*r**2*exp(2*mu1) - 2*nur**2*r**2*exp(2*mu1) - 2*nurr*r**2*exp(2*mu1) + 8*psi**2*self.xi*exp(2*mu1) + 8*l*psi**2*self.xi*exp(2*mu1) + 8*l**2*psi**2*self.xi*exp(2*mu1) + l*exp(4*mu1) + l**2*exp(4*mu1) - e*ka*r**2*exp(4*mu1) + ka*p*r**2*exp(4*mu1)) + 2*(2*psi*(depsi*r**2*exp(2*mu1) + 2*debph*(-4*nur*self.xi*(-1 + exp(2*mu1)) + r*exp(2*mu1))) + ek*(8*psi**2*self.xi - 2*exp(2*mu1) + 2*mu1r*r*exp(2*mu1) - 2*nur*r*exp(2*mu1) - 8*psi**2*self.xi*exp(2*mu1) + l*exp(4*mu1) + l**2*exp(4*mu1) - e*ka*r**2*exp(4*mu1) + ka*p*r**2*exp(4*mu1)))) + bph**2*(eh2*r*(-64*bphrr*psi*self.xi**2*(-1 - 2*nur*r + exp(2*mu1)) + 64*psi**2*self.xi**2*(2*nur**2*r + 2*nurr*r + mu1r*(-3 - 6*nur*r + exp(2*mu1)) - nur*(-3 + (-3 + l + l**2)*exp(2*mu1))) + r**3*self.msq*exp(6*mu1)) + eh0*(64*bphrr*psi*r*self.xi**2*(-1 + 2*nur*r + (1 + l + l**2)*exp(2*mu1)) - 64*psi**2*self.xi**2*(-6 + 3*nur*r - 2*nur**2*r**2 - 2*nurr*r**2 + 2*exp(2*mu1) + 2*l*exp(2*mu1) + 2*l**2*exp(2*mu1) - nur*r*exp(2*mu1) + mu1r*r*(-3 + 6*nur*r + (1 + l + l**2)*exp(2*mu1))) + r**4*self.msq*exp(6*mu1)) - 2*(-16*debph*psi*self.xi*(-4*l*(1 + l)*nur**2*r*self.xi*exp(2*mu1) + r*exp(2*mu1)*(-4*l*(1 + l)*nurr*self.xi + r**2*self.msq*exp(2*mu1)) + 4*nur*self.xi*(l*(1 + l)*mu1r*r*exp(2*mu1) + 2*(-3 + (1 + l + l**2)*exp(2*mu1)))) + ek*r*(-64*bphrr*psi*self.xi**2*(-1 + exp(2*mu1)) + 64*psi**2*self.xi**2*(mu1r*(-3 + exp(2*mu1)) - nur*(-3 + (-1 + l + l**2)*exp(2*mu1))) + r**3*self.msq*exp(6*mu1)))))/(4.*r**2*(32*bph**2*nur*psi**2*self.xi**2*(3 + exp(2*mu1)) - 4*bph*psi*self.xi*exp(2*mu1)*(-1 + 6*nur*r + exp(2*mu1)) + nur*r**2*exp(4*mu1))) 
         
    def deh2dr(self, r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi):
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)
        pr = self.dpdr(r, nu, mu1, bph, psi ,p ,e)
        nurr = self.ddnudr(r, nu, mu1, bph, psi, p, e, csq)  
        mu1rr = self.ddmu1dr(r, nu, mu1, bph, psi, p, e, csq)
        bphrrr = self.dddphdr(r, nu, mu1, bph, psi, p, e, csq) 
        nurrr = self.dddnudr(r, nu, mu1, bph, psi, p, e, csq)
        eh2 = self.eh2f(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi)
        eh0r = self.deh0dr(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi) 
        ekr = self.dekdr(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi)  
        
        return (eh0r*(-8*bph*nur*psi*self.xi + exp(2*mu1))*(-8*bph*bphrr*self.xi + 8*bph*mu1r*psi*self.xi - 8*psi**2*self.xi + exp(2*mu1)) + 8*self.xi*(eh0*(-8*bph*nurr*psi**3*self.xi - 8*nur*psi**4*self.xi + psi*(bph**2*(8*bphrrr*nur*self.xi - 8*bphrr*nurr*self.xi) - 3*bphrr*exp(2*mu1) - bph*(2*mu1r**2 - mu1rr + 2*mu1r*nur - nurr)*exp(2*mu1)) + bph*(-(bphrrr*exp(2*mu1)) + 3*bphrr*mu1r*exp(2*mu1) + bphrr*nur*(-8*bph*bphrr*self.xi + exp(2*mu1))) + psi**2*(nur*(8*bph*bphrr*self.xi - 8*bph**2*mu1rr*self.xi + exp(2*mu1)) + mu1r*(8*bph**2*nurr*self.xi + 3*exp(2*mu1)))) - 2*(bph*depsi*(-(mu1r*nur) + nur**2 + nurr)*(8*bph*nur*psi*self.xi - exp(2*mu1)) + debph*(psi*(8*bph**2*nur*nurrr*self.xi + mu1r*nur*exp(2*mu1) - nur**2*(8*bph**2*(mu1rr - nurr)*self.xi + exp(2*mu1)) - nurr*(8*bph**2*nurr*self.xi + exp(2*mu1))) + bph*(-8*bph*bphrr*nur*(nur**2 + nurr)*self.xi - 2*mu1r**2*nur*exp(2*mu1) + (nur*(mu1rr - 2*nurr) - nurrr)*exp(2*mu1) + mu1r*(3*nurr*exp(2*mu1) + 2*nur**2*(4*bph*bphrr*self.xi + exp(2*mu1))))))))/(-8*bph*nur*psi*self.xi + exp(2*mu1))**2
 
    def ddebphdr(self, r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi):
    
        return depsi
           
    def dddebphdr(self, r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi):
        l=2.
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e)
        pr = self.dpdr(r, nu, mu1, bph, psi ,p ,e)
        nurr = self.ddnudr(r, nu, mu1, bph, psi, p, e, csq)  
        mu1rr = self.ddmu1dr(r, nu, mu1, bph, psi, p, e, csq)
        bphrrr = self.dddphdr(r, nu, mu1, bph, psi, p, e, csq) 
        nurrr = self.dddnudr(r, nu, mu1, bph, psi, p, e, csq)
        eh2 = self.eh2f(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi)
        eh0r = self.deh0dr(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi) 
        ekr = self.dekdr(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi)   
        eh2r = self.deh2dr(r, nu, mu1, bph, psi, p, e, csq, eh0, ek, debph, depsi) 
    
        return (4*bph*eh0*ka*(e + p)*r**3*self.xi*((-1 + exp(2*mu1))*exp(2*mu1) + 2*nur*(r*exp(2*mu1) - 4*bph*psi*self.xi*(1 + exp(2*mu1))))*exp(4*mu1) + csq*(-32*bph**4*psi*r**2*self.msq*self.xi**2*(eh2*(1 - exp(2*mu1) + nur*r*(1 + exp(2*mu1))) + eh0*(-1 + exp(2*mu1) + nur*r*(1 + exp(2*mu1))))*exp(4*mu1) + 2*debph*(64*bph**3*psi*self.xi**2*exp(2*mu1)*(8*l*(1 + l)*mu1r*nur*self.xi + 8*l*(1 + l)*nur**2*self.xi*exp(2*mu1) + (-1 + exp(2*mu1))*(4*l*(1 + l)*nurr*self.xi + r**2*self.msq*exp(2*mu1))) + r**3*exp(4*mu1)*(-8*nurr*self.xi - 8*mu1r*nur*self.xi*(-3 + exp(2*mu1)) + 8*nur**2*self.xi*(-1 + exp(2*mu1)) + 8*nurr*self.xi*exp(2*mu1) + l*exp(4*mu1) + l**2*exp(4*mu1) + r**2*self.msq*exp(4*mu1)) - 8*bph**2*self.xi*((-4*l*(1 + l)*mu1r*self.xi*(1 + nur*r*(-3 + exp(2*mu1)) - exp(2*mu1)) + 4*l*(1 + l)*nur*self.xi*(-1 + exp(2*mu1)) + 4*l*(1 + l)*nur**2*r*self.xi*(1 + exp(2*mu1)) + r*(-1 + exp(2*mu1))*(4*l*(1 + l)*nurr*self.xi + r**2*self.msq*exp(2*mu1)))*exp(4*mu1) + 32*bphrr*nur*psi*r*self.xi**2*(-3 + 2*exp(2*mu1) + exp(4*mu1)) - 8*psi**2*r*self.xi*((l + l**2 + r**2*self.msq)*exp(4*mu1) + 4*nur**2*self.xi*(-3 - 2*exp(2*mu1) + exp(4*mu1)) + 4*mu1r*nur*self.xi*(-3 + 2*exp(2*mu1) + exp(4*mu1)))) - 16*bph*r*self.xi*exp(2*mu1)*(-2*bphrr*self.xi*(-1 + exp(2*mu1))*(-1 + 4*nur*r + exp(2*mu1)) + psi*(8*nur**2*r*self.xi*(-2 + exp(2*mu1)) + 2*nur*self.xi*(3 - 4*exp(2*mu1) + exp(4*mu1)) + 2*mu1r*self.xi*(3 - 4*exp(2*mu1) + 4*nur*r*exp(2*mu1) + exp(4*mu1)) + r*(4*nurr*self.xi*(-1 + exp(2*mu1)) + (l + l**2 + r**2*self.msq)*exp(4*mu1))))) - 32*bph**2*self.xi**2*(eh0*(-(bphrr*r*exp(2*mu1)*(-2 - 4*nur**2*r**2 - 6*nur*r*(-1 + exp(2*mu1)) - (-4 + l + l**2)*exp(2*mu1) + (-2 + l + l**2)*exp(4*mu1))) + psi*exp(2*mu1)*(-6*mu1r*r - 10*nur*r + 20*mu1r*nur*r**2 + 4*nur**2*r**2 - 6*nurr*r**2 - 14*mu1r*nur**2*r**3 + 6*nur**3*r**3 + 6*nur*nurr*r**3 + 2*l*exp(2*mu1) + 2*l**2*exp(2*mu1) + 8*mu1r*r*exp(2*mu1) + 3*l*mu1r*r*exp(2*mu1) + 3*l**2*mu1r*r*exp(2*mu1) + 12*nur*r*exp(2*mu1) - 3*l*nur*r*exp(2*mu1) - 3*l**2*nur*r*exp(2*mu1) - 16*mu1r*nur*r**2*exp(2*mu1) + 8*nur**2*r**2*exp(2*mu1) + 6*nurr*r**2*exp(2*mu1) - 2*mu1r*nur**2*r**3*exp(2*mu1) + 2*nur**3*r**3*exp(2*mu1) + 2*nur*nurr*r**3*exp(2*mu1) + e*ka*r**2*(-1 + exp(2*mu1))*exp(2*mu1) - ka*p*r**2*exp(2*mu1)*(-1 + exp(2*mu1) + 2*nur*r*(1 + exp(2*mu1))) - 2*l*exp(4*mu1) - 2*l**2*exp(4*mu1) - 2*mu1r*r*exp(4*mu1) + l*mu1r*r*exp(4*mu1) + l**2*mu1r*r*exp(4*mu1) - 2*nur*r*exp(4*mu1) - l*nur*r*exp(4*mu1) - l**2*nur*r*exp(4*mu1)) + 8*psi**3*self.xi*(-1 - (-2 + l + l**2)*exp(2*mu1) - 2*nur**2*r**2*(1 + exp(2*mu1)) + (-1 + l + l**2)*exp(4*mu1) - nur*r*(-3 + 2*exp(2*mu1) + exp(4*mu1)))) + r*(2*psi**3*(-16*ekr*nur*r*self.xi - eh2r*r**2*exp(2*mu1) + 2*ekr*r**2*exp(2*mu1) - 8*ek*nur*self.xi*exp(2*mu1) + 4*ek*l*nur*self.xi*exp(2*mu1) + 4*ek*l**2*nur*self.xi*exp(2*mu1) - eh0r*(-8*self.xi + (r**2 + 8*self.xi)*exp(2*mu1)) - 8*ek*nur*self.xi*exp(4*mu1) + 4*ek*l*nur*self.xi*exp(4*mu1) + 4*ek*l**2*nur*self.xi*exp(4*mu1)) + psi*exp(2*mu1)*(4*ekr*mu1r*r + 8*ekr*nur*r + 4*ekr*mu1r*nur*r**2 - 20*ekr*nur**2*r**2 - 6*ekr*nurr*r**2 + 2*ek*mu1r*exp(2*mu1) - ek*l*mu1r*exp(2*mu1) - ek*l**2*mu1r*exp(2*mu1) + 2*ek*nur*exp(2*mu1) - ek*l*nur*exp(2*mu1) - ek*l**2*nur*exp(2*mu1) - 4*ekr*mu1r*r*exp(2*mu1) - 8*ekr*nur*r*exp(2*mu1) + 4*ek*mu1r*nur*r*exp(2*mu1) - 2*ek*l*mu1r*nur*r*exp(2*mu1) - 2*ek*l**2*mu1r*nur*r*exp(2*mu1) - 12*ek*nur**2*r*exp(2*mu1) + 6*ek*l*nur**2*r*exp(2*mu1) + 6*ek*l**2*nur**2*r*exp(2*mu1) - 8*ek*nurr*r*exp(2*mu1) + 4*ek*l*nurr*r*exp(2*mu1) + 4*ek*l**2*nurr*r*exp(2*mu1) + 4*ekr*mu1r*nur*r**2*exp(2*mu1) - 4*ekr*nur**2*r**2*exp(2*mu1) - 2*ekr*nurr*r**2*exp(2*mu1) + eh2r*(-1 + exp(2*mu1))*(-1 + 4*nur*r + exp(2*mu1)) - 2*ek*mu1r*exp(4*mu1) + ek*l*mu1r*exp(4*mu1) + ek*l**2*mu1r*exp(4*mu1) - 2*ek*nur*exp(4*mu1) + ek*l*nur*exp(4*mu1) + ek*l**2*nur*exp(4*mu1) - eh0r*(5 - 8*nur*r - 6*exp(2*mu1) + 4*mu1r*r*(1 + exp(2*mu1)) + exp(4*mu1))) + 4*depsi*psi**2*(-(mu1r*r**2*exp(2*mu1)) - r*(-3 + exp(2*mu1))*exp(2*mu1) + nur*(-24*self.xi + 2*(r**2 + 8*self.xi)*exp(2*mu1) + (r**2 + 8*self.xi)*exp(4*mu1))) + exp(2*mu1)*(-(bphrr*(2*r*(ekr*(1 + nur*r*(-3 + exp(2*mu1)) - exp(2*mu1)) - eh0r*(-1 + exp(2*mu1))) + ek*(-2 + l + l**2)*exp(2*mu1)*(-1 + 2*nur*r + exp(2*mu1)))) + 2*depsi*(-4*nur**2*r - 2*nurr*r*(-1 + exp(2*mu1)) + nur*(3 - 4*exp(2*mu1) + exp(4*mu1)) + mu1r*(3 - 4*exp(2*mu1) + 4*nur*r*(-3 + 2*exp(2*mu1)) + exp(4*mu1))))) + eh2*(e*ka*psi*r**2*(1 - exp(2*mu1) + nur*r*(1 + exp(2*mu1)))*exp(4*mu1) - ka*p*psi*r**2*(1 - exp(2*mu1) + nur*r*(1 + exp(2*mu1)))*exp(4*mu1) - 2*(2*bphrr*psi**2*r**3*exp(2*mu1) - bphrr*r*exp(2*mu1)*(2 + 2*nur**2*r**2 - 3*exp(2*mu1) + nur*r*(-7 + 5*exp(2*mu1)) + exp(4*mu1)) + psi*r*exp(2*mu1)*(-(nurr*r*(3 + exp(2*mu1))) - nur**3*r**2*(3 + exp(2*mu1)) - 2*nur**2*r*(7 + exp(2*mu1)) + nur*(8 - 9*exp(2*mu1) - nurr*r**2*(3 + exp(2*mu1)) + exp(4*mu1)) + mu1r*(6 - 7*exp(2*mu1) + nur**2*r**2*(7 + exp(2*mu1)) + 2*nur*r*(1 + 5*exp(2*mu1)) + exp(4*mu1))) + 2*psi**3*(-(mu1r*r**3*exp(2*mu1)) + 4*nur**2*r**2*self.xi*(1 + exp(2*mu1)) + 2*(self.xi + (r**2 - 2*self.xi)*exp(2*mu1) + self.xi*exp(4*mu1)) + nur*r*(-18*self.xi + (r**2 + 8*self.xi)*exp(2*mu1) + 2*self.xi*exp(4*mu1)))))) + 4*bph*r*self.xi*exp(2*mu1)*(eh0*(e*ka*r**2*(-1 + exp(2*mu1))*exp(4*mu1) - ka*p*r**2*(-3 + 4*nur*r + 3*exp(2*mu1))*exp(4*mu1) - 2*(exp(2*mu1)*((-1 + nur*r + exp(2*mu1))*(-4*nur*r - 2*nur**2*r**2 - 2*nurr*r**2 + l*(1 + l)*exp(2*mu1)) - mu1r*r*(-2*nur**2*r**2 - 2*nur*r*(-1 + exp(2*mu1)) + l*(1 + l)*exp(2*mu1))) - 4*psi**2*self.xi*(-2 - 4*nur**2*r**2 - 6*nur*r*(-1 + exp(2*mu1)) - (-4 + l + l**2)*exp(2*mu1) + (-2 + l + l**2)*exp(4*mu1)))) + 2*(ek*(-2 + l + l**2)*exp(2*mu1)*(-((mu1r*nur - nur**2 - nurr)*r**2*exp(2*mu1)) + 4*psi**2*self.xi*(-1 + 2*nur*r + exp(2*mu1))) + eh2*(-4*bphrr*psi*r**3*exp(2*mu1) + r*exp(2*mu1)*(2*nurr*r + 2*nur**3*r**2 - 2*nur**2*r*(-3 + mu1r*r) + nur*(-4 - 10*mu1r*r + 2*nurr*r**2 + 4*exp(2*mu1) + e*ka*r**2*exp(2*mu1) - ka*p*r**2*exp(2*mu1))) - 4*psi**2*(4*nur**2*r**2*self.xi - mu1r*r**3*exp(2*mu1) + nur*r*(-14*self.xi + (r**2 + 10*self.xi)*exp(2*mu1)) + 2*(2*self.xi + (r**2 - 3*self.xi)*exp(2*mu1) + self.xi*exp(4*mu1)))) - 2*(psi**2*r*(eh2r*r**2*exp(2*mu1) - 2*ekr*(2*self.xi + 2*nur*r*self.xi*(-3 + exp(2*mu1)) + (r**2 - 2*self.xi)*exp(2*mu1)) + eh0r*(-4*self.xi + (r**2 + 4*self.xi)*exp(2*mu1))) + r*exp(2*mu1)*(-(eh0r*(-1 - mu1r*r + nur*r + exp(2*mu1))) + ekr*r*(2*nur**2*r + nurr*r + nur*(-1 - 2*mu1r*r + exp(2*mu1)))) - 2*depsi*psi*(-(mu1r*r**3*exp(2*mu1)) + 2*(2*self.xi + (r**2 - 4*self.xi)*exp(2*mu1) + nur*r*(-8*self.xi + (r**2 + 8*self.xi)*exp(2*mu1)) + 2*self.xi*exp(4*mu1)))))) - r**4*(-((eh0r + eh2r - 2*ekr)*psi*r) + depsi*(4 - 2*mu1r*r + 2*nur*r) + 2*eh2*(-(bphrr*r) + psi*(-2 + mu1r*r - nur*r)))*exp(6*mu1) + 8*bph**3*self.xi*(-32*psi*r*self.xi**2*(-(bphrr*(2*eh0r*(-1 + exp(2*mu1)) - nur*(-4*ekr*r + ek*(-2 + l + l**2)*exp(2*mu1)*(1 + exp(2*mu1))))) - 2*depsi*(-2*nurr*(-1 + exp(2*mu1)) + nur**2*(-1 - 4*exp(2*mu1) + exp(4*mu1)) + mu1r*nur*(-9 + 4*exp(2*mu1) + exp(4*mu1))) + psi*(8*ekr*nur**2*r + 2*ekr*nurr*r - 2*ek*mu1r*nur*exp(2*mu1) + ek*l*mu1r*nur*exp(2*mu1) + ek*l**2*mu1r*nur*exp(2*mu1) + 6*ek*nur**2*exp(2*mu1) - 3*ek*l*nur**2*exp(2*mu1) - 3*ek*l**2*nur**2*exp(2*mu1) + 4*ek*nurr*exp(2*mu1) - 2*ek*l*nurr*exp(2*mu1) - 2*ek*l**2*nurr*exp(2*mu1) + 8*ekr*nur**2*r*exp(2*mu1) + 2*ekr*nurr*r*exp(2*mu1) + 2*ek*mu1r*nur*exp(4*mu1) - ek*l*mu1r*nur*exp(4*mu1) - ek*l**2*mu1r*nur*exp(4*mu1) + 2*ek*nur**2*exp(4*mu1) - ek*l*nur**2*exp(4*mu1) - ek*l**2*nur**2*exp(4*mu1) - eh2r*nur*(-3 + 2*exp(2*mu1) + exp(4*mu1)) + eh0r*(4*mu1r*exp(2*mu1) + nur*(-3 - 2*exp(2*mu1) + exp(4*mu1))))) + eh2*(32*bphrr*psi*self.xi**2*((-1 + exp(2*mu1))**2 + 2*nur**2*r**2*(1 + exp(2*mu1)) + nur*r*(-9 + 4*exp(2*mu1) + exp(4*mu1))) - 32*psi**2*self.xi**2*(-2*nurr*r*(1 + exp(2*mu1)) - 2*nur**3*r**2*(1 + exp(2*mu1)) + nur**2*r*(-11 - 10*exp(2*mu1) + exp(4*mu1)) + nur*(3 - 4*exp(2*mu1) - 2*nurr*r**2*(1 + exp(2*mu1)) + exp(4*mu1)) + mu1r*(3 - 4*exp(2*mu1) + 6*nur**2*r**2*(1 + exp(2*mu1)) + exp(4*mu1) + nur*r*(-3 + 6*exp(2*mu1) + exp(4*mu1)))) + nur*r**4*self.msq*exp(6*mu1)) + eh0*(-32*bphrr*psi*self.xi**2*(-1 - (-2 + l + l**2)*exp(2*mu1) - 2*nur**2*r**2*(1 + exp(2*mu1)) + (-1 + l + l**2)*exp(4*mu1) - nur*r*(-3 + 2*exp(2*mu1) + exp(4*mu1))) + 32*psi**2*self.xi**2*(2*nurr*r*(-1 + exp(2*mu1)) + 2*nur**3*r**2*(1 + exp(2*mu1)) - nur**2*r*(-1 - 4*exp(2*mu1) + exp(4*mu1)) - nur*(3 + (-4 + l + l**2)*exp(2*mu1) - 2*nurr*r**2*(1 + exp(2*mu1)) + (1 + l + l**2)*exp(4*mu1)) + mu1r*(-3 + (4 + l + l**2)*exp(2*mu1) - 6*nur**2*r**2*(1 + exp(2*mu1)) + (-1 + l + l**2)*exp(4*mu1) - nur*r*(-9 + 4*exp(2*mu1) + exp(4*mu1)))) + r**3*self.msq*(-1 + nur*r + exp(2*mu1))*exp(6*mu1)))))/(2.*csq*r*(-32*bph**2*self.xi**2*exp(2*mu1)*(-2*psi**2*r**2 + (-1 + exp(2*mu1))*(-1 + 4*nur*r + exp(2*mu1))) - 16*bph*psi*r**3*self.xi*exp(4*mu1) + 256*bph**3*nur*psi*self.xi**3*(-3 + 2*exp(2*mu1) + exp(4*mu1)) + r**4*exp(6*mu1)))   

    # tidal recurrence equations
    def tidcoef2(self, p0, ep0, csq0, bph0, nu2, mu12, bph2, nu4, mu14, bph4, eh00, debph0):       
        """r^4 coefficients"""
        eh02 = (-(eh00*ep0*ka) - csq0*eh00*ep0*ka + 32*csq0*eh00*mu12 - 56*csq0*eh00*nu2 - eh00*ka*p0 + 3*csq0*eh00*ka*p0 + 4*bph0*csq0*debph0*self.msq - 2*bph0**2*csq0*eh00*self.msq - 128*bph0*bph2**2*csq0*debph0*self.xi - 128*bph2**2*csq0*eh00*self.xi - 256*bph0*bph4*csq0*eh00*self.xi - 448*bph2*csq0*debph0*mu12*self.xi - 768*bph0*bph2*csq0*eh00*mu12*self.xi - 64*bph0*csq0*debph0*mu12**2*self.xi + 64*bph0*csq0*debph0*mu14*self.xi - 896*bph2*csq0*debph0*nu2*self.xi + 1728*bph0*bph2*csq0*eh00*nu2*self.xi + 384*bph0*csq0*debph0*mu12*nu2*self.xi - 128*bph0*csq0*debph0*nu2**2*self.xi + 256*bph0*csq0*debph0*nu4*self.xi - 96*bph0**2*bph2*csq0*debph0*self.msq*self.xi - 32*bph0*csq0*debph0*mu12*self.msq*self.xi - 64*bph0*csq0*debph0*nu2*self.msq*self.xi + 2048*bph0*bph2**3*csq0*eh00*self.xi**2 + 4096*bph0**2*bph2*bph4*csq0*eh00*self.xi**2 + 384*bph0**2*bph2**2*csq0*eh00*ep0*ka*self.xi**2 + 1536*bph0**2*bph2**2*csq0*eh00*mu12*self.xi**2 - 3584*bph0**2*csq0*eh00*mu12**3*self.xi**2 - 512*bph0**2*csq0*eh00*mu12*mu14*self.xi**2 + 12288*bph0*bph2**2*csq0*debph0*nu2*self.xi**2 - 4096*bph0**2*bph4*csq0*debph0*nu2*self.xi**2 - 15872*bph0**2*bph2**2*csq0*eh00*nu2*self.xi**2 - 768*bph0**2*bph2*csq0*debph0*ep0*ka*nu2*self.xi**2 + 2048*bph0**2*bph2*csq0*debph0*mu12*nu2*self.xi**2 - 3072*bph0*csq0*debph0*mu12**2*nu2*self.xi**2 - 7168*bph0**2*csq0*eh00*mu12**2*nu2*self.xi**2 - 1024*bph0**2*csq0*eh00*mu14*nu2*self.xi**2 + 3072*bph0**2*bph2*csq0*debph0*nu2**2*self.xi**2 - 512*bph0**2*eh00*ep0*ka*nu2**2*self.xi**2 - 512*bph0**2*csq0*eh00*ep0*ka*nu2**2*self.xi**2 - 6144*bph0*csq0*debph0*mu12*nu2**2*self.xi**2 + 26624*bph0**2*csq0*eh00*mu12*nu2**2*self.xi**2 - 8192*bph0**2*csq0*eh00*nu2**3*self.xi**2 - 4096*bph0**2*bph2*csq0*debph0*nu4*self.xi**2 - 2048*bph0**2*csq0*eh00*mu12*nu4*self.xi**2 - 4096*bph0**2*csq0*eh00*nu2*nu4*self.xi**2 - 384*bph0**2*bph2**2*csq0*eh00*ka*p0*self.xi**2 + 768*bph0**2*bph2*csq0*debph0*ka*nu2*p0*self.xi**2 - 512*bph0**2*eh00*ka*nu2**2*p0*self.xi**2 + 1536*bph0**2*csq0*eh00*ka*nu2**2*p0*self.xi**2 + 384*bph0**4*bph2**2*csq0*eh00*self.msq*self.xi**2 + 1024*bph0**2*bph2*csq0*debph0*nu2*self.msq*self.xi**2 - 768*bph0**4*bph2*csq0*debph0*nu2*self.msq*self.xi**2 - 1536*bph0**3*csq0*debph0*mu12*nu2*self.msq*self.xi**2 - 1024*bph0**3*csq0*debph0*nu2**2*self.msq*self.xi**2 - 1024*bph0**4*csq0*eh00*nu2**2*self.msq*self.xi**2 + 36864*bph0**3*bph2**3*csq0*eh00*mu12*self.xi**3 + 40960*bph0**3*bph2**3*csq0*eh00*nu2*self.xi**3 - 73728*bph0**3*bph2**2*csq0*debph0*mu12*nu2*self.xi**3 + 16384*bph0**2*bph2**2*csq0*eh00*mu12*nu2*self.xi**3 + 32768*bph0**3*bph4*csq0*eh00*mu12*nu2*self.xi**3 + 6144*bph0**3*bph2*csq0*eh00*ep0*ka*mu12*nu2*self.xi**3 + 106496*bph0**3*bph2*csq0*eh00*mu12**2*nu2*self.xi**3 + 16384*bph0**3*bph2*csq0*eh00*mu14*nu2*self.xi**3 - 81920*bph0**3*bph2**2*csq0*debph0*nu2**2*self.xi**3 - 32768*bph0**2*bph2**2*csq0*eh00*nu2**2*self.xi**3 - 65536*bph0**3*bph4*csq0*eh00*nu2**2*self.xi**3 + 12288*bph0**3*bph2*csq0*eh00*ep0*ka*nu2**2*self.xi**3 + 98304*bph0**2*bph2*csq0*debph0*mu12*nu2**2*self.xi**3 - 581632*bph0**3*bph2*csq0*eh00*mu12*nu2**2*self.xi**3 - 12288*bph0**3*csq0*debph0*ep0*ka*mu12*nu2**2*self.xi**3 + 98304*bph0**3*csq0*debph0*mu12**2*nu2**2*self.xi**3 + 32768*bph0**3*csq0*debph0*mu14*nu2**2*self.xi**3 + 212992*bph0**3*bph2*csq0*eh00*nu2**3*self.xi**3 - 24576*bph0**3*csq0*debph0*ep0*ka*nu2**3*self.xi**3 + 409600*bph0**3*csq0*debph0*mu12*nu2**3*self.xi**3 - 163840*bph0**3*csq0*debph0*nu2**4*self.xi**3 + 32768*bph0**3*bph2*csq0*eh00*mu12*nu4*self.xi**3 + 131072*bph0**3*bph2*csq0*eh00*nu2*nu4*self.xi**3 - 131072*bph0**3*csq0*debph0*mu12*nu2*nu4*self.xi**3 - 131072*bph0**3*csq0*debph0*nu2**2*nu4*self.xi**3 - 6144*bph0**3*bph2*csq0*eh00*ka*mu12*nu2*p0*self.xi**3 - 12288*bph0**3*bph2*csq0*eh00*ka*nu2**2*p0*self.xi**3 + 12288*bph0**3*csq0*debph0*ka*mu12*nu2**2*p0*self.xi**3 + 24576*bph0**3*csq0*debph0*ka*nu2**3*p0*self.xi**3 + 6144*bph0**5*bph2*csq0*eh00*mu12*nu2*self.msq*self.xi**3 + 12288*bph0**5*bph2*csq0*eh00*nu2**2*self.msq*self.xi**3 - 12288*bph0**5*csq0*debph0*mu12*nu2**2*self.msq*self.xi**3 - 24576*bph0**5*csq0*debph0*nu2**3*self.msq*self.xi**3 + 589824*bph0**4*bph2**2*csq0*eh00*mu12**2*nu2*self.xi**4 + 524288*bph0**3*bph2**3*csq0*eh00*nu2**2*self.xi**4 + 1048576*bph0**4*bph2*bph4*csq0*eh00*nu2**2*self.xi**4 + 2883584*bph0**4*bph2**2*csq0*eh00*mu12*nu2**2*self.xi**4 - 1179648*bph0**4*bph2*csq0*debph0*mu12**2*nu2**2*self.xi**4 - 1048576*bph0**3*bph2**2*csq0*debph0*nu2**3*self.xi**4 - 2097152*bph0**4*bph4*csq0*debph0*nu2**3*self.xi**4 - 1310720*bph0**4*bph2**2*csq0*eh00*nu2**3*self.xi**4 - 5767168*bph0**4*bph2*csq0*debph0*mu12*nu2**3*self.xi**4 + 2621440*bph0**4*bph2*csq0*debph0*nu2**4*self.xi**4 - 1048576*bph0**4*bph2**2*csq0*eh00*nu2*nu4*self.xi**4 + 2097152*bph0**4*bph2*csq0*debph0*nu2**2*nu4*self.xi**4)/(28.*csq0*(1 - 32*bph0*bph2*self.xi + 256*bph0**2*bph2**2*self.xi**2 - 128*bph0**2*mu12**2*self.xi**2 - 512*bph0**2*mu12*nu2*self.xi**2 + 8192*bph0**3*bph2*mu12*nu2*self.xi**3))
        debph2 = -(-6*bph2*csq0*eh00 - 16*csq0*debph0*mu12 + 4*csq0*debph0*nu2 - csq0*debph0*self.msq + 256*bph0*bph2**2*csq0*eh00*self.xi + 512*bph0*bph2*csq0*debph0*mu12*self.xi - 4*bph0*eh00*ep0*ka*mu12*self.xi - 4*bph0*csq0*eh00*ep0*ka*mu12*self.xi + 16*bph0*csq0*eh00*mu12**2*self.xi - 16*bph0*csq0*eh00*mu14*self.xi - 320*bph0*bph2*csq0*debph0*nu2*self.xi - 8*bph0*eh00*ep0*ka*nu2*self.xi - 8*bph0*csq0*eh00*ep0*ka*nu2*self.xi - 96*csq0*debph0*mu12*nu2*self.xi + 32*bph0*csq0*eh00*mu12*nu2*self.xi - 128*bph0*csq0*eh00*nu2**2*self.xi - 64*bph0*csq0*eh00*nu4*self.xi - 4*bph0*eh00*ka*mu12*p0*self.xi + 12*bph0*csq0*eh00*ka*mu12*p0*self.xi - 8*bph0*eh00*ka*nu2*p0*self.xi + 24*bph0*csq0*eh00*ka*nu2*p0*self.xi + 32*bph0*bph2*csq0*debph0*self.msq*self.xi + 16*bph0**2*csq0*debph0*mu12*self.msq*self.xi - 8*bph0**3*csq0*eh00*mu12*self.msq*self.xi - 16*bph0**2*csq0*debph0*nu2*self.msq*self.xi - 16*bph0**3*csq0*eh00*nu2*self.msq*self.xi - 3584*bph0**2*bph2**3*csq0*eh00*self.xi**2 - 4608*bph0**2*bph2**2*csq0*debph0*mu12*self.xi**2 - 512*bph0*bph2**2*csq0*eh00*mu12*self.xi**2 - 1024*bph0**2*bph4*csq0*eh00*mu12*self.xi**2 - 1792*bph0*bph2*csq0*debph0*mu12**2*self.xi**2 + 1280*bph0**2*bph2*csq0*eh00*mu12**2*self.xi**2 + 1792*bph0**2*csq0*debph0*mu12**3*self.xi**2 + 512*bph0**2*bph2*csq0*eh00*mu14*self.xi**2 + 256*bph0**2*csq0*debph0*mu12*mu14*self.xi**2 + 6144*bph0**2*bph2**2*csq0*debph0*nu2*self.xi**2 - 512*bph0*bph2**2*csq0*eh00*nu2*self.xi**2 - 1024*bph0**2*bph4*csq0*eh00*nu2*self.xi**2 + 128*bph0**2*bph2*eh00*ep0*ka*nu2*self.xi**2 + 320*bph0**2*bph2*csq0*eh00*ep0*ka*nu2*self.xi**2 - 4096*bph0*bph2*csq0*debph0*mu12*nu2*self.xi**2 - 512*bph0**2*bph2*csq0*eh00*mu12*nu2*self.xi**2 + 8704*bph0**2*csq0*debph0*mu12**2*nu2*self.xi**2 + 512*bph0**2*csq0*debph0*mu14*nu2*self.xi**2 + 5376*bph0**2*bph2*csq0*eh00*nu2**2*self.xi**2 - 384*bph0**2*csq0*debph0*ep0*ka*nu2**2*self.xi**2 + 4608*bph0**2*csq0*debph0*mu12*nu2**2*self.xi**2 - 2560*bph0**2*csq0*debph0*nu2**3*self.xi**2 + 3072*bph0**2*bph2*csq0*eh00*nu4*self.xi**2 + 1024*bph0**2*csq0*debph0*mu12*nu4*self.xi**2 - 2048*bph0**2*csq0*debph0*nu2*nu4*self.xi**2 + 128*bph0**2*bph2*eh00*ka*nu2*p0*self.xi**2 - 576*bph0**2*bph2*csq0*eh00*ka*nu2*p0*self.xi**2 + 384*bph0**2*csq0*debph0*ka*nu2**2*p0*self.xi**2 - 256*bph0**2*bph2**2*csq0*debph0*self.msq*self.xi**2 - 384*bph0**3*bph2*csq0*debph0*mu12*self.msq*self.xi**2 + 256*bph0**3*bph2*csq0*debph0*nu2*self.msq*self.xi**2 + 448*bph0**4*bph2*csq0*eh00*nu2*self.msq*self.xi**2 - 384*bph0**4*csq0*debph0*nu2**2*self.msq*self.xi**2 + 16384*bph0**3*bph2**4*csq0*eh00*self.xi**3 + 8192*bph0**2*bph2**3*csq0*eh00*mu12*self.xi**3 + 16384*bph0**3*bph2*bph4*csq0*eh00*mu12*self.xi**3 + 1536*bph0**3*bph2**2*csq0*eh00*ep0*ka*mu12*self.xi**3 - 30720*bph0**3*bph2**2*csq0*eh00*mu12**2*self.xi**3 - 4096*bph0**3*bph2**2*csq0*eh00*mu14*self.xi**3 - 32768*bph0**3*bph2**3*csq0*debph0*nu2*self.xi**3 + 16384*bph0**2*bph2**3*csq0*eh00*nu2*self.xi**3 + 32768*bph0**3*bph2*bph4*csq0*eh00*nu2*self.xi**3 - 3072*bph0**3*bph2**2*csq0*eh00*ep0*ka*nu2*self.xi**3 + 81920*bph0**2*bph2**2*csq0*debph0*mu12*nu2*self.xi**3 - 16384*bph0**3*bph4*csq0*debph0*mu12*nu2*self.xi**3 - 8192*bph0**3*bph2**2*csq0*eh00*mu12*nu2*self.xi**3 - 3072*bph0**3*bph2*csq0*debph0*ep0*ka*mu12*nu2*self.xi**3 - 90112*bph0**3*bph2*csq0*debph0*mu12**2*nu2*self.xi**3 - 8192*bph0**3*bph2*csq0*debph0*mu14*nu2*self.xi**3 - 16384*bph0**2*bph2**2*csq0*debph0*nu2**2*self.xi**3 - 32768*bph0**3*bph4*csq0*debph0*nu2**2*self.xi**3 - 73728*bph0**3*bph2**2*csq0*eh00*nu2**2*self.xi**3 + 6144*bph0**3*bph2*csq0*debph0*ep0*ka*nu2**2*self.xi**3 - 57344*bph0**3*bph2*csq0*debph0*mu12*nu2**2*self.xi**3 + 81920*bph0**3*bph2*csq0*debph0*nu2**3*self.xi**3 - 49152*bph0**3*bph2**2*csq0*eh00*nu4*self.xi**3 - 16384*bph0**3*bph2*csq0*debph0*mu12*nu4*self.xi**3 + 65536*bph0**3*bph2*csq0*debph0*nu2*nu4*self.xi**3 - 1536*bph0**3*bph2**2*csq0*eh00*ka*mu12*p0*self.xi**3 + 3072*bph0**3*bph2**2*csq0*eh00*ka*nu2*p0*self.xi**3 + 3072*bph0**3*bph2*csq0*debph0*ka*mu12*nu2*p0*self.xi**3 - 6144*bph0**3*bph2*csq0*debph0*ka*nu2**2*p0*self.xi**3 + 1536*bph0**5*bph2**2*csq0*eh00*mu12*self.msq*self.xi**3 - 3072*bph0**5*bph2**2*csq0*eh00*nu2*self.msq*self.xi**3 - 3072*bph0**5*bph2*csq0*debph0*mu12*nu2*self.msq*self.xi**3 + 6144*bph0**5*bph2*csq0*debph0*nu2**2*self.msq*self.xi**3 + 147456*bph0**4*bph2**3*csq0*eh00*mu12**2*self.xi**4 - 131072*bph0**3*bph2**4*csq0*eh00*nu2*self.xi**4 - 262144*bph0**4*bph2**2*bph4*csq0*eh00*nu2*self.xi**4 + 131072*bph0**4*bph2**3*csq0*eh00*mu12*nu2*self.xi**4 - 294912*bph0**4*bph2**2*csq0*debph0*mu12**2*nu2*self.xi**4 + 262144*bph0**3*bph2**3*csq0*debph0*nu2**2*self.xi**4 + 524288*bph0**4*bph2*bph4*csq0*debph0*nu2**2*self.xi**4 + 327680*bph0**4*bph2**3*csq0*eh00*nu2**2*self.xi**4 - 262144*bph0**4*bph2**2*csq0*debph0*mu12*nu2**2*self.xi**4 - 655360*bph0**4*bph2**2*csq0*debph0*nu2**3*self.xi**4 + 262144*bph0**4*bph2**3*csq0*eh00*nu4*self.xi**4 - 524288*bph0**4*bph2**2*csq0*debph0*nu2*nu4*self.xi**4)/(14.*csq0*(1 - 32*bph0*bph2*self.xi + 256*bph0**2*bph2**2*self.xi**2 - 128*bph0**2*mu12**2*self.xi**2 - 512*bph0**2*mu12*nu2*self.xi**2 + 8192*bph0**3*bph2*mu12*nu2*self.xi**3))
        ek2 = (-8*bph2*debph0 + 2*eh02 + 2*eh00*nu2 + bph0*debph0*self.msq - 32*bph2**2*eh00*self.xi - 64*bph0*bph4*eh00*self.xi - 32*bph0*bph2*eh02*self.xi - 4*bph0*bph2*eh00*ep0*ka*self.xi + 80*bph0*bph2*eh00*mu12*self.xi + 64*bph2*debph0*nu2*self.xi + 64*bph0*debph2*nu2*self.xi - 48*bph0*bph2*eh00*nu2*self.xi + 8*bph0*debph0*ep0*ka*nu2*self.xi - 64*bph0*debph0*mu12*nu2*self.xi + 96*bph0*debph0*nu2**2*self.xi + 128*bph0*debph0*nu4*self.xi + 4*bph0*bph2*eh00*ka*p0*self.xi - 8*bph0*debph0*ka*nu2*p0*self.xi - 4*bph0**3*bph2*eh00*self.msq*self.xi + 8*bph0**3*debph0*nu2*self.msq*self.xi - 384*bph0**2*bph2**2*eh00*mu12*self.xi**2 + 256*bph0**2*bph2**2*eh00*nu2*self.xi**2 + 768*bph0**2*bph2*debph0*mu12*nu2*self.xi**2 - 512*bph0**2*bph2*debph0*nu2**2*self.xi**2)/2.
        return [eh02, debph2, ek2]           
  
    # slow-rotation equations; 1st-order l=1      
    def domdr(self, r, nu, mu1, bph, psi, p, e, om, omp):
    
        return omp
        
    def ddomdr(self, r, nu, mu1, bph, psi, p, e, om, omp):
        nur = self.dnudr( r, nu, mu1, bph, psi, p, e)
        mu1r = self.dmu1dr(r, nu, mu1, bph, psi ,p ,e)
        bphrr = self.ddphdr(r, nu, mu1, bph, psi ,p ,e) 
    
        return (omp*(-8*bph*(-(bphrr*r) + psi*(-3 + 3*mu1r*r + nur*r))*self.xi + r*(8*psi**2*self.xi + (-4 + mu1r*r + nur*r)*exp(2*mu1))) + om*(8*psi**2*self.xi + 8*bph*self.xi*((mu1r - nur)*psi*(-3 + exp(2*mu1)) - bphrr*(-1 + exp(2*mu1))) - 2*exp(2*mu1) + 2*mu1r*r*exp(2*mu1) - 2*nur*r*exp(2*mu1) - 8*psi**2*self.xi*exp(2*mu1) + 2*exp(4*mu1) + e*ka*r**2*exp(4*mu1) + 3*ka*p*r**2*exp(4*mu1) - bph**2*r**2*self.msq*exp(4*mu1)))/(r*(-8*bph*psi*self.xi + r*exp(2*mu1)))     
 
    # omega center equations
    def rotcoef2(self, p0, ep0, bph0, nu2, mu12, bph2, om0): 
        return (-2*ep0*ka*om0 - bph0**2*self.msq*om0 + 4*mu12*om0 - 8*nu2*om0 + 128*bph0*bph2*nu2*om0*self.xi)/(10.*(-1 + 16*bph0*bph2*self.xi))   

    def rotcoef4(self, p0, ep0, bph0, nu2, mu12, bph2, p2, ep2, nu4, mu14, bph4, om0): 
        return ((20*ep2*ka*om0)/(-20 + 320*bph0*bph2*self.xi) + (4*ep0**2*ka**2*om0)/(-20 + 320*bph0*bph2*self.xi) + (32*ep0*ka*mu12*om0)/(-20 + 320*bph0*bph2*self.xi) - (80*mu14*om0)/(-20 + 320*bph0*bph2*self.xi) + (40*ep0*ka*nu2*om0)/(-20 + 320*bph0*bph2*self.xi) - (128*mu12*nu2*om0)/(-20 + 320*bph0*bph2*self.xi) + (176*nu2**2*om0)/(-20 + 320*bph0*bph2*self.xi) + (320*nu4*om0)/(-20 + 320*bph0*bph2*self.xi) + (4*bph0**2*ep0*ka*om0*self.msq)/(-20 + 320*bph0*bph2*self.xi) + (16*bph0**2*mu12*om0*self.msq)/(-20 + 320*bph0*bph2*self.xi) + (20*bph0**2*nu2*om0*self.msq)/(-20 + 320*bph0*bph2*self.xi) + (bph0**4*om0*self.msq**2)/(-20 + 320*bph0*bph2*self.xi) + (896*bph0*bph4*ep0*ka*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) - (320*bph0*bph2*ep2*ka*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) - (1792*bph0*bph4*mu12*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) + (2048*bph0*bph2*mu12**2*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) + (1280*bph0*bph2*mu14*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) - (1536*bph0*bph4*nu2*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) + (4352*bph0*bph2*mu12*nu2*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) - (5632*bph0*bph2*nu2**2*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) - (128*bph0*bph2*ep0*ka*(13*mu12 + 5*nu2)*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) - (10240*bph0*bph2*nu4*om0*self.xi)/(-20 + 320*bph0*bph2*self.xi) + (448*bph0**3*bph4*om0*self.msq*self.xi)/(-20 + 320*bph0*bph2*self.xi) + (24576*bph0**2*bph2*bph4*nu2*om0*self.xi**2)/(-20 + 320*bph0*bph2*self.xi) + (128*bph0*bph2**3*om0*self.xi*(-5 + 96*nu2*self.xi))/(-20 + 320*bph0*bph2*self.xi) - (4*bph0*bph2*om0*self.msq*(-5 + 16*bph0**2*(13*mu12 + 5*nu2)*self.xi))/(-20 + 320*bph0*bph2*self.xi) + (8*bph2**2*om0*(5 + 56*ep0*ka*self.xi - 112*mu12*self.xi - 96*nu2*self.xi - 4*bph0**2*self.xi*(3*self.msq + 128*(9*mu12*nu2 - 11*nu2**2 - 20*nu4)*self.xi)))/(-20 + 320*bph0*bph2*self.xi))/(280/(-20 + 320*bph0*bph2*self.xi) - (8960*bph0*bph2*self.xi)/(-20 + 320*bph0*bph2*self.xi) + (71680*bph0**2*bph2**2*self.xi**2)/(-20 + 320*bph0*bph2*self.xi))    
    
    
    
    
            
